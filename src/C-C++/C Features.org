#+SETUPFILE: ~/.emacs.d/src/org-templates/level-1.org
#+TITLE: C Features
#+OPTIONS: num:nil

* the sizes of the standard types aren't precisely defined
Though C is considered relatively low-level as high-level languages
go, it does take the position that the exact size of an object (i.e.
in bits) is an implementation detail. Type int is supposed to
represent a machine's natural word size. 

* pointer
** Example 1
#+begin_src c
char buf[256];
gets(buf);
#+end_src
One should never use gets, since there is no way to limit the amount of input it will
read. This leads to security problems(get the root priviledge). 

* throw and exception
* strings are represented as null-terminated arrays[fn:1]
It makes some confusing problems.
** Example 1
#+begin_src c
char *p, buf[256];
p = malloc(strlen(buf)+1);
strcpy(p, buf);
#+end_src
=strlen= does not count the '\0' that terminates a string, while
=strcpy= copies it. So not enough space is allocated, and =strcpy= writes
past the end of the allocated space.







* Footnotes

[fn:1] The Practice of Programming page 14






