#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE:  C++ puzzles and FAQ
#+OPTIONS: num:nil H:2


* Explain the difference between templates in C++ and generics in Java.
http://en.wikipedia.org/wiki/Comparison_of_Java_and_C%2B%2B#Templates_vs._Generics

* Differences between C++ Classes and Structs
** members and inheritance
that members of a class are private by default, whereas members of a
struct are public by default. Inheritance between classes is also
private by default, and inheritance between structs is public by
default. 

** a struct inheriting from a class and a class inheriting from a struct
#+begin_src c
class A
{
   public:
      int a;
};

struct B : A { };

struct C
{
      int c;
};

class D : C { };

int main()
{
   B b;
   D d;
   b.a = 1;
   d.c = 2;
}
#+end_src
Although a recent version of the GNU project C++ compiler treats the
assignment of 2 into d.c in the above example as a compile-time error,
a programmer who is more interested in standards compliance should
refer to the C++ standard. After all, compilers do not determine
standard behavior; standards prescribe standard behavior for
compilers. The GNU project C++ compiler is consistent with 11.2.2 of
ISO/IEC 14882-2003, which states that the kind of inheritance is
determined by the derived class being declared as a class or struct
when an access specificer for the base class is absent.
** Inheritance differences?[fn:1]
+ a struct is implicitly sealed, a class isn't.
+ a struct can't be abstract, a class can.
+ a struct can't call : base() in its constructor whereas a class with no explicit base class can.
+ a struct can't extend another class, a class can.
+ a struct can't declare protected members (eg fields, nested types) a class can.
+ a struct can't declare abstract function members, an abstract class can.
+ a struct can't declare virtual function members, a class can.
+ a struct can't declare sealed function members, a class can.
+ a struct can't declare override function members, a class can. The
  one exception to this rule is that a struct can override the virtual
  methods of System.Object, viz, Equals(), and GetHashCode(), and
  ToString().

* Footnotes

[fn:1] http://www.jaggersoft.com/pubs/StructsVsClasses.htm#inheritance differences


