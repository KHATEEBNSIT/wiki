#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Filesystem OverView
#+OPTIONS: num:nil H:3


* General
** arago main page
http://arago-project.org/wiki/index.php/Main_Page
** busybox
http://www.busybox.net/
** ubuntu
https://wiki.ubuntu.com/ARM/RootfsFromScratch
** Root File system solutions
http://processors.wiki.ti.com/index.php/Linux_Toolchain#Root_File_System_solutions

** Creating a Root File System for Linux on OMAP35x
http://processors.wiki.ti.com/index.php/Creating_a_Root_File_System_for_Linux_on_OMAP35x
* Modify
** Using The Correct Console Device
 update the =/etc/inittab= file in the filesystem used for kernel 
#+begin_src sh
S:2345:respawn:/sbin/getty 115200 ttyS2
by,
S:2345:respawn:/sbin/getty 115200 ttyO2
#+end_src

* Arago
** Setting Up Build Environment and build
*** ubuntu install dependency
#+begin_src sh
sudo apt-get install diffstat texi2html chrpath subversion python-psyco 
#+end_src 
*** Create the directory
Create a new directory for the build environment:
#+begin_src sh
$ mkdir $HOME/oe
$ cd $HOME/oe
#+end_src
*** Clone Arago repositories
Now check out the following repositories:
#+begin_src sh
$ git clone git://arago-project.org/git/arago.git
$ git clone git://arago-project.org/git/arago-oe-dev.git
$ git clone git://arago-project.org/git/arago-bitbake.git
#+end_src
The directory should now be populated with 3 subdirectories – =arago=, =arago-oe-dev= and =arago-bitbake=.
*** Copy setup/config files
Arago repository comes with samples of arago/setenv and
arago/conf/local.conf files, which you can use as a starting point, by
copying them into their actual names (without .sample extension) and
modifying to suit your needs:
#+begin_src s
$ cp arago/setenv.sample arago/setenv
$ cp arago/conf/local.conf.sample arago/conf/local.conf
#+end_src

+ File: =arago/setenv=
  Edit =arago/setenv= file and make sure environment variables are set
  properly. OEBASE should point to the directory you’ve created in the
  beginning:
#+begin_src sh
export OEBASE=$HOME/oe
#+end_src
+ File: =arago/setenv=
  Also, in order to use a separate "scratch" area outside of home
  directory, you may want to enable SCRATCH variable and point it
  appropriately:
#+begin_src sh
export SCRATCH=/sim/scratch_AID
#+end_src

*** Set the environment variables
#+begin_src sh
$ . arago/seten
#+end_src
Or, 
#+begin_src sh
$ source arago/setenv
#+end_src
*** Point to CSL toolchain
If not done before, set the PATH variable to point to the CodeSourcery
toolchain (refer to [[http://www.mentor.com/embedded-software/codesourcery][Getting CodeSourcery Toolchain]]([[http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/lite/?cmpid=7108&lite=arm&target_os=GNU%2FLinux&target_arch=ARM&returnURL=https%253A%252F%252Fsourcery.mentor.com%252FGNUToolchain%252Frelease858%253Flite%253Darm%2526cmpid%253D7108][The binary
distribution for 2009q1-203 version]]) for obtaining one):

#+begin_src sh
$ export PATH=/opt/arm-2009q1/bin:$PATH
#+end_src

*** Build a minimal base filesystem
Now it should be ready to start a build of the minimal filesystem
image:
#+begin_src sh
$ bitbake arago-base-image
#+end_src
*** Build a "demo" filesystem for OMAP3 EVM
#+begin_src sh
$ MACHINE=omap3evm bitbake arago-console-image
#+end_src
*** Build different kernels for supported platforms
#+begin_src sh
$ MACHINE=omap3evm bitbake virtual/kernel
$ MACHINE=beagleboard bitbake virtual/kernel
$ MACHINE=dm6446-evm bitbake virtual/kernel
$ MACHINE=dm355-evm bitbake virtual/kernel
#+end_src
*** High-level hierarchy of arago-deploy directory
Resulting images and packages will be placed under =arago-deploy=
directory - =images= for the filesystem, kernel and bootloader; and =ipk=
for binary IPK packages, respectively.

#+begin_src sh
arago-deploy
|-- images
|   |-- arago
|   |-- dm355-evm
|   |-- dm6446-evm
|   `-- omap3evm
|-- ipk
|   |-- all
|   |-- arago
|   |-- armv5te
|   |-- armv7a
|   |-- dm355-evm
|   |-- dm6446-evm
|   |-- i686
|   |-- i686-armv5te-sdk
|   |-- i686-armv7a-sdk
|   `-- omap3evm
`-- sdk
#+end_src

*** Build individual package recipes
You can also look in =oe/arago/recipes= for individual package recipes
that you can bitbake. For example:
#+begin_src sh
bitbake curl
bitbake thhtpd
#+end_src

*** build a native compiler (on dm8168) using
#+begin_src sh
MACHINE=c6a816x-evm ./arago-bitbake/bin/bitbake gcc-4.3.3(since codesourcery is using 4.3.3) or
MACHINE=c6a816x-evm ./arago-bitbake/bin/bitbake task-sdk-native
#+end_src
* Host and Target
After setting up opkg respository and pointing it to apache webserver
with my vmware, now allows me easy install of python, dropbear, perl,
etc cross-complied using code sourcery.
#+begin_verse
On Host:
Install Apache sudo apt-get install apache2
After you finish building packages on host, refresh the package index on the host: > bitbake package-index
add a symlink to the arago deploy/ipk directory to apache's home page =/var/www/oe-repo=

On EVM:
Determine your host IP address, and then add a src/gz  line to =/etc/opkg/opkg.conf=
On the device, re-fetch the package list : opkg update
On the device, search for packages or install them
=opkg list '*strace*'=
=opkg install strace=
#+end_verse
