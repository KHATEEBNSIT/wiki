#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Cracking the Coding Interview Notes
#+OPTIONS: num:nil H:2


* Site
+ http://www.careercup.com/

* Before the Interview

Resume screeners look for the same things that interviewers do:
»»Are you smart?
»»Can you code?

Writing Strong Bullets: For each role, try to discuss your accomplishments with the following approach: “Accomplished X by implementing Y which led to Z.” Here’s an example:

»»“Reduced object rendering time by 75% by applying Floyd’s algorithm, leading to a 10% reduction in system boot time.”
Here’s another example with an alternate wording:

»»“Increased average match accuracy from 1.2 to 1.5 by implementing a
new comparison algorithm based on windiff.”

Languages: Knowing which languages to list on your resume is always a tricky thing. Do you list everything you’ve ever worked with? Or only the ones that you’re more comfortable with (even though that might only be one or two languages)? I recommend the following compromise: list most languages you’ve used, but add your experience level. This approach is shown below:

»»“Languages: Java (expert), C++ (proficient), JavaScript (prior
experience), C (prior experience)”



** What questions should you ask the interviewer?
Most interviewers will give you a chance to ask them questions. The quality of your questions will be a factor, whether subconsciously or consciously, in their decisions.
Some questions may come to you during the interview, but you can - and should - prepare questions in advance. Doing research on the company or team may help you with preparing questions.
Questions can be divided into three different categories:

Genuine Questions: These are the questions you actually want to know. Here are a few ideas of questions that are valuable to many candidates:

1. “How much of your day do you spend coding?”
2. “How many meetings do you have every week?”
3. “What is the ratio of testers to developers to product managers? What is the interaction like? How does project planning happen on the team?”

Insightful Questions: These questions are designed to demonstrate your deep knowledge of programming or technologies.
1. “I noticed that you use technology X. How do you handle problem Y?”
2. “Why did the product choose to use the X protocol over the Y protocol? I know it has benefits like A, B, C, but many companies choose not to use it because of issue D.”

Passion Questions: These questions are designed to demonstrate your passion for technology.
1. “I’m very interested in scalability. Did you come in with a background in this, or what opportunities are there to learn about it?”
2. “I’m not familiar with technology X, but it sounds like a very interesting solution. Could you tell me a bit more about how it works?”

* The Interview and Beyond
** Five Steps to a Technical Questions
A technical interview question can be solved utilizing a five step approach:
1. Ask your interviewer questions to resolve ambiguity.
2. Design an Algorithm
3. Write pseudo-code first, but make sure to tell your interviewer that you’re writing pseudo-code! Otherwise, he/she may think that you’re never planning to write “real” code, and many interviewers will hold that against you.
4. Write your code, not too slow and not too fast.
5. Test your code and carefully fix any mistakes.

** Step 1: Ask Questions
Good questions might be things like: What are the data types? How much data is there? What assumptions do you need to solve the problem? Who is the user?
Example: “Design an algorithm to sort a list.”
»»Question: What sort of list? An array? A linked list?
»»Answer: An array.
»»Question: What does the array hold? Numbers? Characters? Strings?
»»Answer: Numbers.
»Question: And are the numbers integers?
»»Answer: Yes.
»»Question: Where did the numbers come from? Are they IDs? Values of something?
»»Answer: They are the ages of customers.
»»Question: And how many customers are there?
»»Answer: About a million.
We now have a pretty different problem: sort an array containing a
million integers between 0 and 130. How do we solve this? Just create
an array with 130 elements and count the number of ages at each value.

** Step 2: Design an Algorithm
Designing an algorithm can be tough, but our five approaches to algorithms can help you out (see pg 34). While you’re designing your algorithm, don’t forget to think about:
»»What are the space and time complexities?
»»What happens if there is a lot of data?
»»Does your design cause other issues? (i.e., if you’re creating a modified version of a binary search tree, did your design impact the time for insert / find / delete?)
»»If there are other issues, did you make the right trade-offs?
»»If they gave you specific data (e.g., mentioned that the data is
ages, or in sorted order), have you leveraged that information?
There’s probably a reason that you’re given it.

** Step 3: Pseudo-Code
Writing pseudo-code first can help you outline your thoughts clearly
and reduce the number of mistakes you commit. But, make sure to tell
your interviewer that you’re writing pseudo-code first and that you’ll
follow it up with “real” code. Many candidates will write pseudo-code
in order to ‘escape’ writing real code, and you certainly don’t want
to be confused with those candidates.

** Step 4: Code
You don’t need to rush through your code; in fact, this will most likely hurt you. Just go at a nice, slow methodical pace. Also, remember this advice:
»»Use Data Structures Generously: Where relevant, use a good data
structure or define your own. For example, if you’re asked a problem
involving finding the minimum age for a group of people, consider
defining a data structure to represent a Person. This shows your interviewer that you care about good object oriented design.

»»Don’t Crowd Your Coding: This is a minor thing, but it can really
help. When you’re writing code on a whiteboard, start in the upper
left hand corner – not in the middle. This will give you plenty of
space to write your answer.

** Step 5: Test
Yes, you need to test your code! Consider testing for:
»»Extreme cases: 0, negative, null, maximums, etc
»»User error: What happens if the user passes in null or a negative value?
»»General cases: Test the normal case.
If the algorithm is complicated or highly numerical (bit shifting, arithmetic, etc), consider testing while you’re writing the code rather than just at the end.
Also, when you find mistakes (which you will), carefully think through
why the bug is occuring. One of the worst things I saw while
interviewing was candidates who recognized a mistake and tried making
“random” changes to fix the error.








** Five Algorithm Approaches
*** APPROACH I: EXAMPLIFY
Description: Write out specific examples of the problem, and see if
you can figure out a general rule.
*** APPROACH II: PATTERN MATCHING
Description: Consider what problems the algorithm is similar to, and
figure out if you can modify the solution to develop an algorithm for
this problem.
*** APPROACH III: SIMPLIFY & GENERALIZE
Description: Change a constraint (data type, size, etc) to simplify
the problem. Then try to solve it. Once you have an algorithm for the
“simplified” problem, generalize the problem again.
*** APPROACH IV: BASE CASE AND BUILD
Description: Solve the algorithm first for a base case (e.g., just one
element). Then, try to solve it for elements one and two, assuming
that you have the answer for element one. Then, try to solve it for
elements one, two and three, assuming that you have the answer to
elements one and two.
*** APPROACH V: DATA STRUCTURE BRAINSTORM
Description: This is hacky, but it often works. Simply run through a list of data structures and try to apply each one.
Example: Numbers are randomly generated and stored into an (expanding) array. How would you keep track of the median?
Data Structure Brainstorm:
»»Linked list? Probably not – linked lists tend not to do very well with accessing and sorting numbers.
»»Array? Maybe, but you already have an array. Could you somehow keep the elements sorted? That’s probably expensive. Let’s hold off on this and return to it if it’s needed.
»»Binary tree? This is possible, since binary trees do fairly well with ordering. In fact, if the binary search tree is perfectly balanced, the top might be the median. But, be careful – if there’s an even number of elements, the median is actually the average of the middle two elements. The middle two elements can’t both be at the top. This is probably a workable algorithm, but let’s come back to it.
»»Heap? A heap is really good at basic ordering and keeping track of max and mins. This is actually interesting – if you had two heaps, you could keep track of the biggest half and the smallest half of the elements. The biggest half is kept in a min heap, such that the smallest element in the biggest half is at the root. The smallest half is kept in a max heap, such that the biggest element of the smallest half is at the root. Now, with these data structures, you have the potential median elements at the roots. If the heaps are no longer the same size, you can quickly “rebalance” the heaps by popping an element off the one heap and pushing it onto the other.
Note that the more problems you do, the better instinct you will
develop about which data structure to apply.


* Questions

** Chapter 7
*** 7.9 
data block allocation -> “Practical File System Design” or B+ trees
** Chapter 8
*** 8.1 Fibonacci number
you may read about the (most efficient) matrix-based algorithm at http://en.wikipedia.org/wiki/Fibonacci_number#Matrix_form
