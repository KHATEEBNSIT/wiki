#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: The C Programming Language Notes
#+OPTIONS: num:nil H:1



[[http://cm.bell-labs.com/cm/cs/cbook/][The C Programming Language]], second edition by [[http://www.cs.bell-labs.com/who/bwk/][Kernighan]] and [[http://www.cs.bell-labs.com/who/dmr/][Ritchie]].

Other people working through the book may be interested in the [[http://www.eskimo.com/~scs/cclass/krnotes/top.html][Notes to Accompany The C Programming Language]] by [[http://www.eskimo.com/~scs/][Steve Summit]], maintainer of
the [[http://c-faq.com/versions.html][comp.lang.c FAQ]]. Also be aware of the [[http://cm.bell-labs.com/cm/cs/cbook/2ediffs.html][errata]].
* Answers
+ There is a book, [[./The C Answer Book.pdf][The C Answer Book by Tondo and Gimpel]], that has
  answers to these exercises. 

+ [[http://www.bamsoftware.com/computers/tcpl-answers.tar.gz][The answer]] by [[http://www.bamsoftware.com/computers/tcpl-answers.html][bamsoftware]].

+ [[http://clc-wiki.net/wiki/K%26R2_solutions][Another site]] (based on an [[http://users.powernet.co.uk/eton/kandr2/][older one]]) that has answers to most of the exercises.

* Chapter 1
** page 5 
The only way to learn a new programming language is by writing
programs in it.
** page 11
you must match up the arguments to printf with the conversion specification; the compiler can't (or won't) generally check them for you or fix things up if you get them wrong. If fahr is a float, the code

	=printf("%d\n", fahr);=

will not work. You might ask, ``Can't the compiler see that %d needs
an integer and fahr is floating-point and do the conversion
automatically, just like in the assignments and comparisons on page
12?'' And the answer is, no. As far as the compiler knows, you've just
passed a character string and some other arguments to printf; it
doesn't know that there's a connection between the arguments and some
special characters inside the string. This is one of the implications
of the fact, stated earlier, that functions like printf are not
special.
** page 15
Notice that there is no semicolon at the end of a #define line.

Actually, all lines that begin with # are special; we'll learn more
about them later.
** page 16
#+begin_src c
int c;
c = getchar();
#+end_src
We must declare =c= to be a type big enough to hold any value that
=getchar= returns. We can't use =char= since =c= must be big enough to
hold =EOF= in addition to any possible =char=. Therefore we use =int=.
** page 17
The line =while ((c = getchar()) != EOF)= epitomizes the cryptic
brevity which C is notorious for. 

We have four things to do:

1. call =getchar=,
2. assign its return value to a variable,
3. test the return value against =EOF=, and
4. process the character (in this case, print it again).

how do you send EOF? The answer depends on what kind of computer
you're using. On Unix and Unix-related systems, it's almost always
control-D. On MS-DOS machines, it's control-Z followed by the RETURN
key. Under Think C on the Macintosh, it's control-D, just like Unix.
On other systems, you may have to do some research to learn how to
send EOF.

* Chapter 2
** page 41
The % operator cannot be applied to =float= or =double=. The direction
of truncation for / and the sign of the result for % are
machine-dependent for negative operands, as is the action taken on
overflow or underflow. This means that -7 / 4 might be -1 or -2, and
-7 % 4 might be -3 or +1. 

** page 44
the lower type is promoted to the higher type, where the order of the
types is 
 =char < short int < int < long int < float < double < long double=
** page 45
Casts can be a bit confusing at first. A cast is the syntax used to
request an explicit type conversion; coercion is just a more formal
word for ``conversion.'' 




* Chapter 3
* Chapter 4
* Chapter 5
* Chapter 6
* Chapter 7
* Chapter 8
