#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Exercises(The C programming Language)
#+options: num:nil H:1
* Chapter 1 - A Tutorial Introduction 
** Ex 1
Run the "hello world" program on your system. Experiment with leaving
out parts of the program, to see what error messages you get.

** Ex 2
Experiment to find out what happens when printf 's argument string
contains \c, where c is some character not listed above.

上面有的：
#+begin_src c
\n {newline}
\t {tab}
\b {backspace}
\" {double quote}
\\ {backslash}
#+end_src

这里必须小心对待转义序列，如果用一个未定义的转义字符则引起[[http://clc-wiki.net/wiki/Undefined_behaviour][Undefined
behaviour]].

** Ex 3
Modify the temperature conversion program to print a heading above the
table.

** Ex 4
Write a program to print the corresponding Celsius to Fahrenheit
table.

** Ex 5
Modify the temperature conversion program to print the table in
reverse order, that is, from 300 degrees to 0.

** Ex 6
Verify that the expression getchar() != EOF is 0 or 1.

** Ex 7 
Write a program to print the value of EOF.

** Ex 8
Write a program to count blanks, tabs, and newlines.

** Ex 9
Write a program to copy its input to its output, replacing each string
of one or more blanks by a single blank. 

** Ex 10
Write a program to copy its input to its output, replacing each tab by
\t , each backspace by \b , and each backslash by \\ . This makes tabs
and backspaces visible in an unambiguous way.

** Ex 11
How would you test the word count program? What kinds of input are
most likely to uncover bugs if there are any? 

** Ex 12
Write a program that prints its input one word per line. 

** Ex 13
Write a program to print a histogram of the lengths of words in its
input. It is easy to draw the histogram with the bars horizontal; a
vertical orientation is more challenging. 

** Ex 14
Write a program to print a histogram of the frequencies of different
characters in its input.

** Ex 15
Rewrite the temperature conversion program of Section 1.2 to use a
function for conversion. 

** Ex 16
Revise the main routine of the longest-line program so it will
correctly print the length of arbitrarily long input lines, and as
much as possible of the text.

** Ex 17
Write a program to print all input lines that are longer than 80
characters. 

** Ex 18
Write a program to remove all trailing blanks and tabs from each line
of input, and to delete entirely blank lines. 

** Ex 19
Write a function reverse(s) that reverses the character string s . Use
it to write a program that reverses its input a line at a time. 

** Ex 20 
Write a program detab that replaces tabs in the input with the proper
number of blanks to space to the next tab stop. Assume a fixed set of
tab stops, say every n columns. Should n be a variable or a symbolic
parameter? 

** Ex 21
Write a program entab that replaces strings of blanks with the minimum
number of tabs and blanks to achieve the same spacing. Use the same
stops as for detab . When either a tab or a single blank would suffice
to reach a tab stop, which should be given preference? 

** Ex 22
Write a program to "fold" long input lines into two or more shorter
lines after the last non-blank character that occurs before the n -th
column of input. Make sure your program does something intelligent
with very long lines, and if there are no blanks or tabs before the
specified column. 

** Ex 23
Write a program to remove all comments from a C program. Don't forget
to handle quoted strings and character constants properly. C comments
do not nest. 

** Ex 24
Write a program to check a C program for rudimentary syntax errors
like unbalanced parentheses, brackets and braces. Don't forget about
quotes, both single and double, escape sequences, and comments. (This
program is hard if you do it in full generality.) 





* Chapter 2 - Types, Operators and Expressions
** a
* Chapter 3 - Control Flow
** a

* Chapter 4 - Functions and Program Structure

* Chapter 5 - Pointers and Arrays

* Chapter 6 - Structures

* Chapter 7 - Input and Output

* Chapter 8 - The UNIX System Interface
