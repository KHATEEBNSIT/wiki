#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: The C++ Programming Language Notes
#+OPTIONS: num:nil H:2
* Overview
Homepage:
http://iskren.info/reading/info/C++/other/Bjarne%20Stroustrup%20Web%20Site/3rd.html

Bjarne Stroustrup's FAQ:
http://iskren.info/reading/info/C++/other/Bjarne%20Stroustrup%20Web%20Site/bs_faq.html#SE

Code Examples from "The C++ Programming Language"
http://iskren.info/reading/info/C++/other/Bjarne%20Stroustrup%20Web%20Site/3rd_code.html

C++ Solutions
http://www.vandevoorde.com/C++Solutions/

Errata for 5th/15th printing of The C++ Programming Language
http://www.math.pku.edu.cn/teachers/qiuzy/books/cppl/3rd_printing16.htm

* Preface
A programmer can partition an application into manageable pieces by
defining new types that closely match the concepts of the application.
This technique for program construction is often called *data
abstraction*.

Objects of some user-defined types contain type information. Programs
using objects of such types are often called *object based*.
* Chapter 1 Notes to the Reader
** 1.3.1 
Except for the =new=, =delete=, =typeid=, =dynamic_cast=, and =throw=
operators and the =try-block=, individual C++ expression and
statements need no run-time support.
** 1.6.1 Suggestions for C Programmers
1. Macros are almost never necessary in C++. Use c o n s t (§5.4) or e n u m (§4.8) to define manifest
    constants, i n l i n e (§7.1.1) to avoid function-calling overhead, t e m p l a t e s (Chapter 13) to
    specify families of functions and types, and n a m e s p a c e s (§8.2) to avoid name clashes.
2. Don’t declare a variable before you need it so that you can initialize it immediately. A
   declaration can occur anywhere a statement can (§6.3.1), in for-statement initializers
   (§6.3.3), and in conditions (§6.3.2.1).
3. Don’t use =malloc()=. The n e w operator (§6.2.6) does the same job better, and instead of
    r e a l l o c (), try a v e c t o r (§3.8).
4. Try to avoid v o i d *, pointer arithmetic, unions, and casts, except deep within the implementation
   of some function or class. In most cases, a cast is an indication of a design error. If
   you must use an explicit type conversion, try using one of the ‘‘new casts’’ (§6.2.7) for a
   more precise statement of what you are trying to do.
5. Minimize the use of arrays and C-style strings. The C++ standard library s t r i n g (§3.5) and
   v e c t o r (§3.7.1) classes can often be used to simplify programming compared to traditional C
   style. In general, try not to build yourself what has already been provided by the standard
   library.
** 1.8 Advice
1. When you program, you create a concrete representation of the ideas in your solution to some
   problem. Let the structure of the program reflect those ideas as
   directly as possible:
#+begin_verse
   [a] If you can think of ‘‘it’’ as a separate idea, make it a class.
   [b] If you can think of ‘‘it’’ as a separate entity, make it an object of some class.
   [c] If two classes have a common interface, make that interface an abstract class.
   [d] If the implementations of two classes have something significant in common, make that commonality a base class.
   [e] If a class is a container of objects, make it a template.
   [f] If a function implements an algorithm for a container, make it a template function implementing the algorithm for a family of containers.
   [g] If a set of classes, templates, etc., are logically related, place them in a common namespace.
#+end_verse
2. When you define either a class that does not implement either a mathematical entity like a
   matrix or a complex number or a low-level type such as a linked
   list:
#+begin_verse
   [a] Don’t use global data (use members).
   [b] Don’t use global functions.
   [c] Don’t use public data members.
   [d] Don’t use friends, except to avoid [a] or [c].
   [e] Don’t put a ‘‘type field’’ in a class; use virtual functions.
   [f] Don’t use inline functions, except as a significant optimization.
#+end_verse

* Chapter 2 A Tour of C++
** 2.5.4 Abstract Types
#+begin_src c++
  class Stack{
  public:
    virtual void push(char c) = 0;
    virtual char pop() = 0;
  };
#+end_src
The word *virtual* means "may be redefined later in a class derived
from this one" in Simula and C++.

The curious ~=0~ syntax says that some class derived from *Stack* must
define the function.
   
** 2.7.1 Containers
A class holding a collection of elements of some type is commonly
called a container class, or simply a container.

/Templates/ are a *compile-time mechanism* so that their use incurs no
run-time overhead compared to ‘‘handwritten code.’’


* Chapter 3 A Tour of the Standard Library

* Chapter 4 Types and Declarations

* Chapter 5 Pointers, Arrays, and Structures

* Chapter 6 Expressions and Statements

* Chapter 7 Functions

* Chapter 8 Namespaces and Exceptions

* Chapter 9 Source Files and Programs

* Chapter 10 Classes

* Chapter 11 Operator Overloading

* Chapter 12 Derived Classes

* Chapter 13 Templates

* Chapter 14 Exceptions Handling

* Chapter 15 Class Hierarchies

* Chapter 16 Library Organization and Containers

* Chapter 17 Standard Containers

* Chapter 18 Algorithms and Function Objects

* Chapter 19 Iterators and Allocators

* Chapter 20 Strings

* Chapter 21 Streams

* Chapter 22 Numerics

* Chapter 23 Developing and Design

* Chapter 24 Design and Programming

* Chapter 25 Roles of Classes

* Appendix A

* Appendix B

* Appendix C

