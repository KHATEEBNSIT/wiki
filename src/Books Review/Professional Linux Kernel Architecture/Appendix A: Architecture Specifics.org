#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Appendix A: Architecture Specifics Notes
#+OPTIONS: num:nil H:2

* Data types
内核在如下3个基本数据类型重做一些基本区别：
+ 在C程序中标准的数据类型；如unsigned long，void *和char。
+ 固定比特数的数据类型。定义在=<asm-generic/int-ll64.h>=
#+begin_src c
typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;

typedef signed char s8;
typedef unsigned char u8;

typedef signed short s16;
typedef unsigned short u16;

typedef signed int s32;
typedef unsigned int u32;

typedef signed long long s64;
typedef unsigned long long u64;
#+end_src
+ 不会直接使用的子系统特有的类型，但经常被特有的函数所用。比如类型
  pid_t用来处理pids和sector_t用来指明扇区数。


#+begin_html
<p class="info">infoThe pre-processor constant =__KERNEL__=  must
always be defined before the file is linked into the kernel source.</p>
#+end_html

* Alignment
在内核的某些地方可能需要处理非对齐数据类型。为了这目的，不同的体系需要
定义2个不同的宏（在=<asm-generic/unaligned.h>=）：
+ get_unaligned(ptr)
+ put_unaligned(val, ptr)

* Memory Pages
=asm-generic/page.h= to indicate the page size used:
#+begin_src c
#define PAGE_SHIFT	12
#ifdef __ASSEMBLY__
#define PAGE_SIZE	(1 << PAGE_SHIFT)
#else
#define PAGE_SIZE	(1UL << PAGE_SHIFT)
#endif
#define PAGE_MASK	(~(PAGE_SIZE-1))
#+end_src

+ PAGE_SHIFT specifies the binary logarithm of the page size.
+ PAGE_SIZE specifies the size of a memory page in bytes.
+ PAGE_ALIGN
