#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Code Complete
#+OPTIONS: num:nil H:2


* Overview
** Book  Website
cc2e.com/1234

* Chapter 1: Welcome To Software Construction
** 1.1 What Is Software Construction?
Here are some of the specific tasks involved in construction:
+ Verifying that the groundwork has been laid so that construction can proceed successfully
+ Determining how your code will be tested
+ Designing and writing classes and routines
+ Creating and naming variables and named constants
+ Selecting control structures and organizing blocks of statements
+ Unit testing, integration testing, and debugging your own code
+ Reviewing other team members' low-level designs and code and having them review yours
+ Polishing code by carefully formatting and commenting it
+ Integrating software components that were created separately
+ Tuning code to make it faster and use fewer resources
** 1.2 Why Is Software Construction Important?
1. Construction is a large part of software development
2. Construction is the central activity in software development
3. With a focus on construction, the individual programmer’s
   productivity can improve enormously
4. Construction’s product, the source code, is often the only
   accurate description of the software
5. Construction is the only activity that’s guaranteed to be done
** 1.3 How to Read This Book
* Chapter 2: Metaphors 
** 2.1 The Importance of Metaphors
Important developments often arise out of analogies. By comparing a
topic you understand poorly to something similar you understand
better, you can come up with insights that result in a better
understanding of the less-familiar topic. This use of metaphor is
called “modeling.”

** 2.2 How to Use Software Metaphor
A heuristic is a technique that helps you look for an answer. Its
results are subject to chance because a heuristic tells you only how
to look, not what to find. It doesn’t tell you how to get directly
from point A to point B; it might not even know where point A and
point B are. In effect, a heuristic is an algorithm in a clown suit.
It’s less predictable, it’s more fun, and it comes without a 30-day
money-back guarantee.

** 2.3 Common Software Metaphors



