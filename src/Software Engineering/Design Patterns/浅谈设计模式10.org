#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: 浅谈设计模式: 模板方法模式(Template method)
#+OPTIONS: num:nil H:2

* 实例

* 模板方法模式(Template method)
** 目的
为操作中的算法定义一个构架，把一些步骤延迟到子类来完成。模板方法让子类
能不改变算法框架的前提下重定义这算法的一些步骤。
** 实现
代码实例在这里]]。
* 总结
** 模板方法模式(Template method)结构
[[./images/templatemethod/template_method_structure.jpg]]
** 组成
+ 抽象类（AbstractClass）
  1. 定义抽象的原语操作，具体子类将重定义它们来实现算法的步骤。
  2. 实现一个模板方法定义一个算法的构架。模板方法调用原语操作和抽象类
     或其他对象定义的操作。
+ 具体类（ConcreteClass）
  实现原语操作来执行算法中子类特有的步骤。

** 应用场景
+ 一次性实现一个算法的不变部分，把变化部分留给子类去实现。
+ 各子类间的共同行为需要被提取并集中到一个共同的类中来避免代码的重复。
  你首先识别出这些现有代码的不同之处，然后把这些不同之处分离到新的操作
  中。最后，你用一个模板方法调用这些新操作之一来替代原有那些不同的代码。
+ 控制子类扩展。你能定义一个只在特定点调用 =hook= 操作的模板方法，以此
  只允许子类在这些点扩展。
