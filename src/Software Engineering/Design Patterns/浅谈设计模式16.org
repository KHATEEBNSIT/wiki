#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: 浅谈设计模式: 原型模式(Prototype)
#+OPTIONS: num:nil H:2

* 实例

* 原型模式(Prototype)
** 目的
使用一个原型的实例来创建一些特定的对象，然后当创建这些新的对象时通过拷
贝这个原型。
** 实现

* 总结
** 原型模式(Prototype)结构
[[./images/prototype/prototype_structure.jpeg]]
** 组成
+ 抽象原型类（Prototype）
  为克隆声明一个接口。
+ 具体原型类（ConcretePrototype）
  实现自我克隆的操作。
+ 客户类（Client）
  通过要求原型类克隆自己来创建新的对象。

** 应用场景
使用原型模式当一个系统需要独立与它的产品如何创建，组成和表示，而且
+ 当这些类在运行时被指定初始化，比如，通过动态加载，或
+ 为了避免创建一个与产品类层次相平行的工厂类层次时，或
+ 当一个类的实例能有许多不同状态组合中之一时，创建相应数目的原型并克隆
  它们比手动实例化它们更方便些。

** 缺点
原型模式的主要缺点是每个原型类的子类必须实现 =Clone= 操作，这可能很困
难。例如，新增 =Clone= 操作是困难的当所考虑的类已经存在。实现 =Clone=
操作可以很困难当内部包含不支持拷贝或有循环引用的对象时。
