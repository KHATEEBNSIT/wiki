#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: 浅谈设计模式十五: 生成器模式(Builder)
#+OPTIONS: num:nil H:3

* 实例

* 生成器模式(Builder)
** 目的
把复杂对象的建造过程从它的表示中分离出来，使得同样的创建过程能创建不同
表现的对象。
** 实现
#+begin_src c++

#+end_src

[[https://github.com/shishougang/DesignPattern-CPP/tree/master/src/builder][代码实例在这里]]。
* 总结
** 生成器模式(Builder)结构
[[./images/builder/builder_structure.jpeg]]
** 组成
+ 生成器（Builder）
  为创建产品（Product）对象的部分指定一个抽象接口。
+ 具体生成器（ConcreteBuilder）
  1. 实现生成器（Builder)的接口以构造和装配该产品(Product)的各个部件。
  2. 定义并明确它所创建的表示。
  3. 提供一个检索产品的接口
+ 管理者（Director）
  构造一个使用Builder接口的对象
+ 产品类（Product）
  1. 表示被构造的复杂对象。ConcreateBuilder创建该产品的内部表示并定义它的装配过程。
  2. 包含定义组成部件的类，包括将这些部件装配成最终产品的接口。

** 应用场景
+ 当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时；
+ 当构造过程必须允许被构造的对象有不同的表示时。
** 缺点
