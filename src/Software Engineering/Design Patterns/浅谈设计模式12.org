#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: 浅谈设计模式: 组合模式(Composite)
#+OPTIONS: num:nil H:2

* 实例

* 组合模式(Composite)
** 目的
把对象组合成树状结构来表示部分-整体的层次结构。组合模式让用户能一致的
对待单个对象和组合对象。
** 实现
代码实例在这里]]。
* 总结
** 组合模式(Composite)结构
[[./images/composite/composite_structure.jpeg]]

一个典型组合对象结构类似如下图：
[[./images/composite/composite_object_structure.jpeg]]
** 组成
+ 构件类（Component）
  1. 为组合模式中的对象声明接口。
  2. 适当的为所有类共有接口实现默认的行为。
  3. 声明一个接口来访问和管理它的子节点。
  4. （可选的）定义一个接口来访问一个构件在递归结构下的父元件，如果适
     当的话，并实现这个接口
+ 树叶类（Leaf）
  1. 在组合模式中表示树叶类。一个树叶类没有子节点。
  2. 在组合模式中为基础对象定义行为。
+ 客户（Client)
  通过元件接口来操作组合模式中的对象。
** 应用场景
+ 你想表示对象的部分-整体层次结构。
+ 你想客户能够忽略对象组合和单个对象的区别。客户能一致的对待组合结构中的所有
  对象。
** 缺点
组合模式其中一个特性是：使得你的设计更具一般性。添加新构件很容易的缺点
就是使得很难限制组合模式中的构件。有时你想要一个组合只有某些特性的元件，
但是，使用组合模式，你不能依靠类型系统来实施这些限制，你不得不使用运行
时检查。
