#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: 设计模式基本原则
#+OPTIONS: num:nil H:2


Design Principle

* 封装那些改变的
识别出应用里改变的方面，然后把它们从不变部分里分离出来封装。这样变化的
部分就不会影响到不变的部分。那么，之后代码改变的话，只需要修改封装好的
变化部分，不引起无意的修改，并提供更好的扩展灵活性。

* 面向接口编程，而不是实现
1. 由接口定义要实现的每个行为；
2. 只要依照接口定义好的编程实现；
3. 我们只需要知道接口是如何，根本不需要实现的细节而去使用这个接口派生
   的对象；
4. 在运行时才赋值具体的实现对象。

* 使用组合优于继承
使用组合创建系统提高灵活性。不单单可以使你把一族的算法封装成它们各自的
类，同时让你在运行时可以改变算法行为。

而继承，子类直接实现好算法的具体行为，不能在运行时改变算法的行为，同时
过多的继承加剧类图的复杂度。
* 追求交互对象间的松耦合

* 类需要可扩展，
* 依赖与抽象类，而不是依赖具体类
