#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: 浅谈设计模式一:策略模式(Strategy)
#+OPTIONS: num:nil H:2


* 问题
有一个模拟鸭子的应用完成。这个应用可以仿真鸭子的各种活动，比如游泳，鸣
叫，飞等等。能马上想到的模式设计如下：

[[./images/duck1.jpeg]]

一个基类 =Duck= 定义Duck的一些特性，子类继承它的特性，并覆盖它的部分特
性。至此没什么问题。子类共同拥有父类的特性，消除了代码的重复性。

然后想让 =Duck= 具有有 =fly()= 的特性，把它加到父类中，相应的不同
duck(子类）如果不具备 或 =fly()= 或 =quack= 的特性,那么就去覆盖父类相
应的特性。

[[./images/duck2.jpeg]]
[[./images/duck3.jpeg]]
[[./images/duck4.jpeg]]

#+begin_html
<p class="info">
每增加一个不同的子类 duck，如果没有父类相应的特性都要去覆盖它，很冗余。
</p>
#+end_html

那么如果把不变的特性继续放在基类 =Duck= 里，而把变化的特性拿出来做成独
立的接口呢？
[[./images/duck5.jpeg]]

#+begin_html
<p class="info">
1. 增加代码的冗余性，每个子类duck都要去实现部分相同的特性;2. 想更改一个相同的 fly() 特性，要在相应的所有子类都修改
</p>
#+end_html

* 策略模式(Strategy)
