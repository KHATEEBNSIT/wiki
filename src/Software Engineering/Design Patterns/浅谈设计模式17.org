#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: 浅谈设计模式: 桥接模式(Bridge)
#+OPTIONS: num:nil H:2

* 实例

* 桥接模式(Bridge)
** 目的
从对象的具体实现中解藕出抽象部分，使它们可以各自独立的变化。
** 实现
http://zh.wikipedia.org/wiki/%E6%A9%8B%E6%8E%A5%E6%A8%A1%E5%BC%8F
* 总结
** 桥接模式(Bridge)结构
[[./images/bridge/bridge_structure.jpeg]]
** 组成
+ 抽象类（Abstraction）
  1. 定义抽象的接口。
  2. 维护一个指向实现类（Implementor）类型的对象的引用。
+ 精炼抽象类（Refined Abstraction）
  扩展抽象类定义的接口。
+ 抽象实现者（Implementor）
  为实现类定义接口。这个接口没有必要和抽象类（Abstraction）的接口相一
  致。实际上这两个接口可以很不同。典型的抽象实现类接口只提供原始操作，
  然而抽象类基于这些原始操作定义上层操作。
+ 具体实现类（ConcreteImplementor）
  实现抽象实现类（Implementor）接口。
** 应用场景
+ 当你想避免抽象部分和它的实现部分永久的绑定时。例如，可能这样的情况，当
  实现部分必须在运行时被选取或换出。
+ 抽象部分和它们的实现部分都需要能被子类扩展时。在这种情况，桥接模式让
  你组合不同的抽象部分和实现部分并可独立扩展它们。
+ 当改变抽象的实现部分对客户没有任何影响时，也就是，客户的代码不需要重
  新编译。
+ （C++）你想从客户那完全隐藏抽象的实现部分.在C++中，类的表现在类的接
  口里可以看到。
+ 你有一堆激增的类时。如此类的层次表明需要把对象分离成两部分。
+ 当你想在多个对象见共享一个实现部分（可能使用引用计数），并想把这个事
  实从客户那隐藏掉时。

** 缺点
