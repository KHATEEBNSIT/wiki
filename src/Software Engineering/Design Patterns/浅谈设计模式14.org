#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: 浅谈设计模式十四: 代理模式(Proxy)
#+OPTIONS: num:nil H:3

* 实例

* 代理模式(Proxy)
** 目的
为其他的对象提供一个代理来控制访问某个对象。
** 实现
#+begin_src c++

#+end_src

[[https://github.com/shishougang/DesignPattern-CPP/tree/master/src/proxy][代码实例在这里]]。
* 总结
** 代理模式(Proxy)结构
[[./images/proxy/proxy_structure.jpeg]]
** 组成
+ 代理类（Proxy）
  1. 保存一个实际主体的引用让代理可以访问它。代理也可以引用主体
     （Subject）如果实际主体（RealSubject）和主体（Subject）的接口是一
     样的。
  2. 提供一个与主体（Subjuect）一致的接口，那么代理类就能替代成实际主
     体。
  3. 控制对实际主体的访问，并且可以负责实际主体的创建或删除。
  4. 其他职责依赖于代理的类型：
     + 远程代理（remote proxies）负责加密一个请求和它的参数，并把它发
       送给在不同地址空间的实际主体。
     + 虚拟代理（virtual proxies）可以缓存实际主体的附加信息，以便延迟
       对它的访问。
     + 保护代理（protection proxies）检查调用者是否有访问权限来进行一
       个请求。
+ 主体（Subject）
  为实际主体（RealSubject）和代理（Proxy）定义共同的接口，这样一个代理
  能被用在任何实际主体希望被使用的地方。
+ 实际主体（RealSubject）
  定义代理表示的实际对象。

** 应用场景
代理非常适用，当需要相较于简单指针更通用或更复杂的对一个对象的引用时。
下面是一些代理模式适用的常见情况：
1. 一个远程代理为一个在不同地址空间的对象提供本地的表示。
2. 一个虚拟代理按需创建一个开销大的对象。
3. 一个保护代理控制对原对象的访问。保护代理非常实用当对象需要不同的访
   问权限。
4. 智能指引（smart reference）用来取代简单的指针指引，并执行附加操作当
   访问时。
