#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Hardware/Software IRQs, tasklets and wait queues
#+OPTIONS: num:nil H:2


* Interrupts
Linux中2种不同的中断:
+ Hardware Interrupts: 又系统和连接的外围设备做产生.
+ SoftIRQs: 在kernel本身被用来有效实现延迟的活动.

** Interrupt Types
总的来说,中断类型可以被分为2类:
+ Synchronous Interrupts 和 Exceptions: 由CPU自身产生,并用户当前运行的
  程序.Exceptions 由许多原因触发:在运行时产生程序错误(经典例子是除
  0).或异常情况发生,处理器需要外部的帮助解决它.
+ Asynchronous interrupts: 是由外围设备产生的经典中断,可以在任何时候发
  生.与synchronous interrupts不同, asynchronous interrupts不和特定进程
  相关.它能在任何时候发生(中断打开情况下),无论当前系统运行什么活动.

如果CPU当前没有在kernel模式下,它会从用户模式跳转到内核模式.然后它执行
一个特定的程序叫做 interrupt service routine(ISR) 或 interrupt
handler.

* Hardware IRQs
中断其实不能直接被处理器外部设备触发,而它被请求是在一个叫interrupt controller
的标准元件的帮助下.所以外部设备只能请求中断通过此元件,这样的请求被熟知
为IRQs或interrupt requests.
** Processing Interrupts
一旦CPU被通知有中断,它需要转到相应的软件程序去进一步处理.因为每个
interrupt和每个exception有为一个编号,kernel使用一张表来包含指向处理函
数的指针.如下图:

[[./Files/interrupt handlers.jpeg]]

*** Entry and Exit Tasks
如下图,interrupt处理被分为3部分.首先,适合处理函数能运行的环境被设置好;
然后处理函数本身被调用;最后系统恢复到interrupt前的状态.

[[./Files/handing-an-interrupt.jpeg]]
** Data Structures

[[./Files/various-interrupt-handlers.jpeg]]


[[./Files/irq-management.jpeg]]
** Interrupt Flow Handling

[[./Files/handle-edge-irq.jpeg]]

[[./Files/handle-level-irq.jpeg]]
** Initializing and Reserving IRQs

[[./Files/request-irq.jpeg]]
** Servicing IRQs

[[./Files/stack-layout-after-entry.jpeg]]

[[./Files/do-irq.jpeg]]

* Software interrupts

** Starting SoftIRQ Processing
[[./Files/do-softirq.jpeg]]

** The SoftIRQ Daemon

* Tasklets

** Generating Tasklets

** Registering Tasklets

** Executing Tasklets

** Example
* Wait queues and completions
** Wait Queues
** Completions
** Work Queues

* cc
[[./Files/

#+begin_src c

#+end_src

* reference
