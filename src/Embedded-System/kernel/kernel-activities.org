#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Hardware/Software IRQs, tasklets and wait queues
#+OPTIONS: num:nil H:2


* Interrupts
Linux中2种不同的中断:
+ Hardware Interrupts: 又系统和连接的外围设备做产生.
+ SoftIRQs: 在kernel本身被用来有效实现延迟的活动.

** Interrupt Types
总的来说,中断类型可以被分为2类:
+ Synchronous Interrupts 和 Exceptions: 由CPU自身产生,并用户当前运行的
  程序.Exceptions 由许多原因触发:在运行时产生程序错误(经典例子是除
  0).或异常情况发生,处理器需要外部的帮助解决它.
+ Asynchronous interrupts: 是由外围设备产生的经典中断,可以在任何时候发
  生.与synchronous interrupts不同, asynchronous interrupts不和特定进程
  相关.它能在任何时候发生(中断打开情况下),无论当前系统运行什么活动.

如果CPU当前没有在kernel模式下,它会从用户模式跳转到内核模式.然后它执行
一个特定的程序叫做 interrupt service routine(ISR) 或 interrupt
handler.

* Hardware IRQs
中断其实不能直接被处理器外部设备触发,而它被请求是在一个叫interrupt controller
的标准元件的帮助下.所以外部设备只能请求中断通过此元件,这样的请求被熟知
为IRQs或interrupt requests.
** Processing Interrupts
一旦CPU被通知有中断,它需要转到相应的软件程序去进一步处理.因为每个
interrupt和每个exception有为一个编号,kernel使用一张表来包含指向处理函
数的指针.如下图:

[[./Files/interrupt handlers.jpeg]]

*** Entry and Exit Tasks
如下图,interrupt处理被分为3部分.首先,适合处理函数能运行的环境被设置好;
然后处理函数本身被调用;最后系统恢复到interrupt前的状态.

[[./Files/handing-an-interrupt.jpeg]]

进入和离开中断处理程序确保处理器从用户模式转到kernel模式.进入代码中关
键部分是从用户模式的stack转化到kernel模式的stack,离开代码相反.所以必须
保存当前寄存器的值,平台相关的寄存器list结构 =pt_regs= 中列出了所有在
kernel模式下会改变的寄存器.

离开代码中kernel检查是否:
+ 调度器需要选择一个新的进程来取代旧的进程.
+ 有需要传递给进程的信号.

因为C和汇编语言的交互需要,特别两者数据交换,这些处理代码在
=arch/arch/kernel/entry.S= 中.

** Data Structures
管理IRQs中心是一张每个条目就是一个IRQ的全局的数组.因为数组位置和中断编
号是一致的.所以很容易通过特定IRQ确定条目位置: IRQ 0的位置是0如此.数组
定义如下:
#+begin_src c
  // kernel/irq/handle.c
  struct irq_desc irq_desc[NR_IRQS] __cacheline_aligned_in_smp = {
    [0 ... NR_IRQS-1] = {
      .status = IRQ_DISABLED,
      .chip = &no_irq_chip,
      .handle_irq = handle_bad_irq,
      .depth = 1,
      // ...
    }
  };
#+end_src

尽管使用架构不相关的数据类型,但是最大支持IRQs个数由平台特定定值
=NR_IRQS= 决定.对于大多数架构来说,这个定值被定义在处理器特定的头文件
=include/asm-arch/irq.h= 中.初始,所有中断条目没有安装指定的处理函数,使
用 =handle_bad_irq= 作为处理函数,它仅仅确认终端.

Kernel的IRQ处理子系统包含3个抽象层,如下图:

[[./Files/various-interrupt-handlers.jpeg]]

1. *High-Level Interrupt Service Routines (ISRs)*: 进行由设备驱动中断
   引发的必要工作.
2. *Interrupt Flow Handling*: 处理中断不同类型如边缘和电平触发间的差异.
3. *Chip-Level Hardware Encapsulation*: 直接与底层产生中断的硬件交互.

继续分析代码,表示IRQ描述符的结构定义如下:

#+begin_src c
  // <irq.h>
  struct irq_desc {
    irq_flow_handler_t handle_irq;
    struct irq_chip *chip;
    void *handler_data;
    void *chip_data;
    struct irqaction *action; /* IRQ action list */
    unsigned int status; /* IRQ status */
    unsigned int depth; /* nested irq disables */
    unsigned int irq_count; /* For detecting broken IRQs */
    unsigned int irqs_unhandled;
    ...
    const char *name;
  } ____cacheline_internodealigned_in_smp;
#+end_src

+ flow层的IRQ处理函数由 =handle_irq= 提供. =handler_data= 可以指向处理
  特定的数据. =handle_irq= 被调用当中断发生时.这个函数并负责使用
  =chip= 提供的控制特定方法来完成必要的底层操作来进行中断处理.
+ =action= 提供一串当中断发生时需要被执行的动作.
+ 芯片特定的处理封装在 =chip= 中.一个特殊的数据结构被引入, =chip_data=
  指向相应使用的数据.
+ =name= 指定 =/proc/interrupts= 中显示的名字.

其中 =depth= 有2个功能,用来指示IRQ线是否打开或关闭,并且记录被关闭的次
数. 一个正数表示被关闭.而0表示被打开.为什么正数被使用来关闭IRQs?因为每
次有代码关闭中断, =depth= 作为计数加1, 每次中断被再次打开, 计数减1.

IRQ能改变它的状态不仅在初始化时,而且可以在运行时. =status= 描述当前状
态. =<irq.h>= 定义了许多定值来描述当前IRQ线的状态.

+ =IRQ_DISABLED= is used for an IRQ line disabled by a device driver.
  It instructs the kernel not to enter the handler.
+ During execution of an IRQ handler the state is set to
  =IRQ_INPROGRESS=.As with =IRQ_DISABLED=, this prohibits the
  remaining kernel code from executing the handler.
+ =IRQ_PENDING= is active when the CPU has noticed an interrupt but has
  not yet executed the corresponding handler.
+ =IRQ_MASKED= is required to properly handle interrupts that occur
  during interrupt processing;
+ =IRQ_PER_CPU= is set when an IRQ can occur on a single CPU only. (On
  SMP systems this renders several protection mechanisms against
  concurrent accesses superfluous.)
+ =IRQ_LEVEL= is used on Alpha and PowerPC to differentiate
  level-triggered and edge-triggered IRQs.
+ =IRQ_REPLAY= means that the IRQ has been disabled but a previous
  interrupt has not yet been acknowledged.
+ =IRQ_AUTODETECT= and =IRQ_WAITING= are used for the automatic
  detection and configuration of IRQs. I will not discuss this in more
  detail, but mention that the respective code is located in =kernel/irq/autoprobe.c=.
+ =IRQ_NOREQUEST= is set if the IRQ can be shared between devices and
  must thus not be exclusively requested by a single device.

使用 =status= 的当前内容,很容易让kernel查询特定IRQ的状态而不用知道硬件
特定的底层实现.但仅仅设置相应的标识不能产生任何效果,底层的硬件必须被告
知状态的改变.

*** IRQ Controller Abstraction
芯片特性的控制被封装在结构 =struct irq_chip= 中,基本如下:
#+begin_src c
  // <irq.h>
  struct irq_chip {
    const char *name;
    unsigned int (*startup)(unsigned int irq);
    void (*shutdown)(unsigned int irq);
    void (*enable)(unsigned int irq);
    void (*disable)(unsigned int irq);
    void (*ack)(unsigned int irq);
    void (*mask)(unsigned int irq);
    void (*mask_ack)(unsigned int irq);
    void (*unmask)(unsigned int irq);
    void (*eoi)(unsigned int irq);
    // ...
    int (*set_type)(unsigned int irq, unsigned int flow_type);
  };
#+end_src

这个结构需要考虑到不同IRQ实现的特性.

=name= 维护一个硬件控制器的标识.IA-32系统可能的值是‘‘XTPIC‘‘ 和 ‘‘IO-APIC,’’.

其他函数指针有如下意思:
+ =startup= 指向用来第一次初始化IRQ的函数.
+ =enable= 使能IRQ.
+ =disable= 是IRQ无效化,而 =shutdown= 彻底关闭中断源.
+ =ack= 与中断控制的硬件紧密相连.在一些模式下,IRQ请求的到达必须得到确
  认以至之后的请求才能被服务.
+ =end= 被调用来标志中断处理的结束.
+ 在多核系统中, =set_affinity= 可以被用来声明特定IRQs由某个CPU处理.
+ =set_type= 用来设置IRQ flow类型.

以IO-APIC为例子:

#+begin_src c
// arch/x86/kernel/apic/io_apic.c
static struct irq_chip ioapic_chip __read_mostly = {
	.name		= "IO-APIC",
	.startup	= startup_ioapic_irq,
	.mask		= mask_IO_APIC_irq,
	.unmask		= unmask_IO_APIC_irq,
	.ack		= ack_apic_edge,
	.eoi		= ack_apic_level,
#ifdef CONFIG_SMP
	.set_affinity	= set_ioapic_affinity_irq,
#endif
	.retrigger	= ioapic_retrigger_irq,
};
#+end_src

在系统中查看中断统计信息:

#+begin_src sh
$ cat /proc/interrupts 
           CPU0       CPU1       CPU2       CPU3       CPU4       CPU5       CPU6       CPU7       
  0:         41          0          0   31487034          0          0          0          0   IO-APIC-edge      timer
  1:          1          0          0          2          0          0          0          0   IO-APIC-edge      i8042
  4:          0          0          0          8          0          0          0          0   IO-APIC-edge    
  8:          0          0          0          1          0          0          0          0   IO-APIC-edge      rtc0
  9:          0          0          0          0          0          0          0          0   IO-APIC-fasteoi   acpi
 12:          0          0          0          4          0          0          0          0   IO-APIC-edge      i8042
 16:         10          0          0          0          0          0         40          0   IO-APIC-fasteoi   ehci_hcd:usb1
 17:         91          0          0          0          0          0          0        148   IO-APIC-fasteoi   snd_hda_intel
 23:    6420912          0          0          0          0          0        141          0   IO-APIC-fasteoi   ehci_hcd:usb2
#+end_src

*** Handler Function Representation
其中有 =irqaction= 结构如下:
#+begin_src c
  // <interrupt.h>
  struct irqaction {
    irq_handler_t handler;
    unsigned long flags;
    const char *name;
    void *dev_id;
    struct irqaction *next;
  }
#+end_src

其中最重要的元素是处理函数 =irq_handler_t handler= , 当设备请求系统中
断时,这个处理函数被调用. =flag= 描述IRQ的一些特性,如下被定义在
=<interrupt.h>= :

+ =IRQF_SHARED= is set forshared IRQsand signals that more than one
  device is using an IRQ line.
+ =IRQF_SAMPLE_RANDO= is set when the IRQ contributes to the kernel
  entropy pool.
+ =IRQF_DISABLED= indicates that the IRQ handler must be executed with
  interrupts disabled.
+ =IRQF_TIMER= denotes a timer interrupt.

next被使用来实现共享IRQ处理.一些 =irqaction= 实例被分组成一个链表.同一
个链表的所有元素必须处理同一个IRQ编号.如下图描述它们如何相连:

[[./Files/irq-management.jpeg]]
** Interrupt Flow Handling
*** Setting Controller Hardware
kernel提供的注册 =irq_chip= 和设置flow处理的函数:

#+begin_src c
  // <irq.h>
  int set_irq_chip(unsigned int irq, struct irq_chip *chip);
  void set_irq_handler(unsigned int irq, irq_flow_handler_t handle);
  void set_irq_chained_handler(unsigned int irq, irq_flow_handler_t handle)
  void set_irq_chip_and_handler(unsigned int irq, struct irq_chip *chip,
                                irq_flow_handler_t handle);
  void set_irq_chip_and_handler_name(unsigned int irq, struct irq_chip *chip,
                                     irq_flow_handler_t handle, const char *name);
#+end_src

+ =set_irq_chip= 把IRQ芯片以 =irq_chip= 实例附加到特定中断上. 如果是
  NULL,那么使用通用值 =no_irq_chip=.
+ =set_irq_handler= 和 =set_irq_chained_handler= 设置flow处理函数给特
  定IRQ编号.
+ =set_chip_and_handler= 同时设置两者.
*** Flow Handling
在分析flow处理实现前,先看怎么定义自己的类型. =irq_flow_handler_t= 指定
IRQ flow处理函数:

#+begin_src c
  // <irq.h>
  typedef void fastcall (*irq_flow_handler_t)(unsigned int irq,
                                              struct irq_desc *desc);
#+end_src

Flow处理函数获取IRQ的编号和对此中断负责的 =irq_desc= 实例.不同硬件需要
不同的flow处理方法: 比如边沿(edge)和电平(levle)触发需要不同的处理方
法.kernel提供一些默认的flow处理对不同类型.它们有一个共同点: 每个flow处
理最后都会调用高层IRQs. =handle_IRQ_event= 负责调用上层处理.
**** Edge-Triggered Interrupts
边沿触发的默认处理是 =handle_edge_irq= .代码流程如下:

[[./Files/handle-edge-irq.jpeg]]
**** Level-Triggered Interrupts
和边沿触发相比,电平触发处理相对简单点.代码流程如下:
[[./Files/handle-level-irq.jpeg]]
**** Other Types of Interrupts
kernel还提供一些其他默认的flow处理:
+ 在IRQ处理完后,只有一个芯片特定的函数需要被调用: =chip->eoi=.默认的函
  数是 =handle_fasteoi_irq=.
+ 没有flow控制的简单中断由 =handle_simple_irq= 处理.
+ 对于每个CPU的IRQs,IRQs只能在多核系统中某个特定的CPU处理由
  =handle_percpu_irq= 完成.
** Initializing and Reserving IRQs
*** Registering IRQs
设备驱动动态的注册IRQ可以通过如下函数:

#+begin_src c
  // kernel/irq/manage.c
  int request_irq(unsigned int irq,
                  irqreturn_t handler,
                  unsigned long irqflags, const char *devname, void *dev_id)
#+end_src

如下是它的代码流程:

[[./Files/request-irq.jpeg]]
*** Freeing IRQs
移除IRQ的函数 =remove_irq= 在 =kernel/irq/manage.c= 中,并通过调用函数
=__free_irq= 完成.

1. 对于每个IRQ,可以有多个行为共享它,所以单单IRQ编号不能识别指定IRQ,同
   时需要 =dev_id=, 所以一开始扫描行为列表,找到相应IRQ条目.
2. 若硬件相关的 =chip->shutdown= 函数存在,调用它,若不存在,就调用
   =chip->disable=,
3. 释放与此IRQ相关的数据结构.
*** Registering Interrupts
上面分析的是由系统外围注册和产生中断的机制.但是kernel还必须处理来自它
本身的进程或用户进程执行的软件所触发的中断.与IRQs相比,kernle不需要提供
动态注册中断处理的接口.因为使用个数在初始化时就知道并且之后不会改变.注
册中断,异常,和traps在kernel初始化时进行,并且它们的预留部分不再改变在运
行时.

当一个中断产生,相应的中断处理直接被自动进行.因为系统中断并不支持中断共
享.总的来说,系统回应中断以如下2种方式:
+ 一个signal被告知给当前用户进程有错误发生.
+ kernel隐式的纠正错误.比如page fault的产生,系统自动纠正它.

** Calling the High-level ISR




* Software interrupts

** Starting SoftIRQ Processing
[[./Files/do-softirq.jpeg]]

** The SoftIRQ Daemon

* Tasklets

** Generating Tasklets

** Registering Tasklets

** Executing Tasklets

** Example
* Wait queues and completions
** Wait Queues
** Completions
** Work Queues

* cc
[[./Files/

#+begin_src c

#+end_src

* reference
** =struct irq_desc=
#+begin_src c
/**
 * struct irq_desc - interrupt descriptor
 * @irq:		interrupt number for this descriptor
 * @timer_rand_state:	pointer to timer rand state struct
 * @kstat_irqs:		irq stats per cpu
 * @irq_2_iommu:	iommu with this irq
 * @handle_irq:		highlevel irq-events handler [if NULL, __do_IRQ()]
 * @chip:		low level interrupt hardware access
 * @msi_desc:		MSI descriptor
 * @handler_data:	per-IRQ data for the irq_chip methods
 * @chip_data:		platform-specific per-chip private data for the chip
 *			methods, to allow shared chip implementations
 * @action:		the irq action chain
 * @status:		status information
 * @depth:		disable-depth, for nested irq_disable() calls
 * @wake_depth:		enable depth, for multiple set_irq_wake() callers
 * @irq_count:		stats field to detect stalled irqs
 * @last_unhandled:	aging timer for unhandled count
 * @irqs_unhandled:	stats field for spurious unhandled interrupts
 * @lock:		locking for SMP
 * @affinity:		IRQ affinity on SMP
 * @node:		node index useful for balancing
 * @pending_mask:	pending rebalanced interrupts
 * @threads_active:	number of irqaction threads currently running
 * @wait_for_threads:	wait queue for sync_irq to wait for threaded handlers
 * @dir:		/proc/irq/ procfs entry
 * @name:		flow handler name for /proc/interrupts output
 */
struct irq_desc {
	unsigned int		irq;
	struct timer_rand_state *timer_rand_state;
	unsigned int            *kstat_irqs;
#ifdef CONFIG_INTR_REMAP
	struct irq_2_iommu      *irq_2_iommu;
#endif
	irq_flow_handler_t	handle_irq;
	struct irq_chip		*chip;
	struct msi_desc		*msi_desc;
	void			*handler_data;
	void			*chip_data;
	struct irqaction	*action;	/* IRQ action list */
	unsigned int		status;		/* IRQ status */

	unsigned int		depth;		/* nested irq disables */
	unsigned int		wake_depth;	/* nested wake enables */
	unsigned int		irq_count;	/* For detecting broken IRQs */
	unsigned long		last_unhandled;	/* Aging timer for unhandled count */
	unsigned int		irqs_unhandled;
	spinlock_t		lock;
#ifdef CONFIG_SMP
	cpumask_var_t		affinity;
	unsigned int		node;
#ifdef CONFIG_GENERIC_PENDING_IRQ
	cpumask_var_t		pending_mask;
#endif
#endif
	atomic_t		threads_active;
	wait_queue_head_t       wait_for_threads;
#ifdef CONFIG_PROC_FS
	struct proc_dir_entry	*dir;
#endif
	const char		*name;
} ____cacheline_internodealigned_in_s
#+end_src
** =set_irq_chip=
#+begin_src c
/**
 *	set_irq_chip - set the irq chip for an irq
 *	@irq:	irq number
 *	@chip:	pointer to irq chip description structure
 */
int set_irq_chip(unsigned int irq, struct irq_chip *chip)
{
	struct irq_desc *desc = irq_to_desc(irq);
	unsigned long flags;

	if (!desc) {
		WARN(1, KERN_ERR "Trying to install chip for IRQ%d\n", irq);
		return -EINVAL;
	}

	if (!chip)
		chip = &no_irq_chip;

	spin_lock_irqsave(&desc->lock, flags);
	irq_chip_set_defaults(chip);
	desc->chip = chip;
	spin_unlock_irqrestore(&desc->lock, flags);

	return 0;
}
#+end_src
** =handle_edge_irq=
#+begin_src c
void
handle_edge_irq(unsigned int irq, struct irq_desc *desc)
{
	spin_lock(&desc->lock);

	desc->status &= ~(IRQ_REPLAY | IRQ_WAITING);

	/*
	 * If we're currently running this IRQ, or its disabled,
	 * we shouldn't process the IRQ. Mark it pending, handle
	 * the necessary masking and go out
	 */
	if (unlikely((desc->status & (IRQ_INPROGRESS | IRQ_DISABLED)) ||
		    !desc->action)) {
		desc->status |= (IRQ_PENDING | IRQ_MASKED);
		mask_ack_irq(desc, irq);
		goto out_unlock;
	}
	kstat_incr_irqs_this_cpu(irq, desc);

	/* Start handling the irq */
	if (desc->chip->ack)
		desc->chip->ack(irq);

	/* Mark the IRQ currently in progress.*/
	desc->status |= IRQ_INPROGRESS;

	do {
		struct irqaction *action = desc->action;
		irqreturn_t action_ret;

		if (unlikely(!action)) {
			desc->chip->mask(irq);
			goto out_unlock;
		}

		/*
		 * When another irq arrived while we were handling
		 * one, we could have masked the irq.
		 * Renable it, if it was not disabled in meantime.
		 */
		if (unlikely((desc->status &
			       (IRQ_PENDING | IRQ_MASKED | IRQ_DISABLED)) ==
			      (IRQ_PENDING | IRQ_MASKED))) {
			desc->chip->unmask(irq);
			desc->status &= ~IRQ_MASKED;
		}

		desc->status &= ~IRQ_PENDING;
		spin_unlock(&desc->lock);
		action_ret = handle_IRQ_event(irq, action);
		if (!noirqdebug)
			note_interrupt(irq, desc, action_ret);
		spin_lock(&desc->lock);

	} while ((desc->status & (IRQ_PENDING | IRQ_DISABLED)) == IRQ_PENDING);

	desc->status &= ~IRQ_INPROGRESS;
out_unlock:
	spin_unlock(&desc->lock);
}
#+end_src
** =handle_level_irq=
#+begin_src c
void
handle_level_irq(unsigned int irq, struct irq_desc *desc)
{
	struct irqaction *action;
	irqreturn_t action_ret;

	spin_lock(&desc->lock);
	mask_ack_irq(desc, irq);

	if (unlikely(desc->status & IRQ_INPROGRESS))
		goto out_unlock;
	desc->status &= ~(IRQ_REPLAY | IRQ_WAITING);
	kstat_incr_irqs_this_cpu(irq, desc);

	/*
	 * If its disabled or no action available
	 * keep it masked and get out of here
	 */
	action = desc->action;
	if (unlikely(!action || (desc->status & IRQ_DISABLED)))
		goto out_unlock;

	desc->status |= IRQ_INPROGRESS;
	spin_unlock(&desc->lock);

	action_ret = handle_IRQ_event(irq, action);
	if (!noirqdebug)
		note_interrupt(irq, desc, action_ret);

	spin_lock(&desc->lock);
	desc->status &= ~IRQ_INPROGRESS;

	if (unlikely(desc->status & IRQ_ONESHOT))
		desc->status |= IRQ_MASKED;
	else if (!(desc->status & IRQ_DISABLED) && desc->chip->unmask)
		desc->chip->unmask(irq);
out_unlock:
	spin_unlock(&desc->lock);
}
#+end_src
