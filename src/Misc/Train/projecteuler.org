#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Project Euler
#+OPTIONS: num:nil H:2


* Answer
http://projecteuler.net/
#+begin_src python
    #1
    sum = 0
    for i in range(1,1000):
        if i % 3 == 0 or i % 5 == 0:
            sum += i
    print sum
    
    #--------------
    #sum = (s+e)*n/2=(d + d*int(x/d)) * int(x/d) /2
    #sum = d * int(x/d) * (1 + int(x/d)) / 2
    sum = 3*int(999/3)*(1+int(999/3))/2 + 
    5*int(999/5)*(1+int(999/5))/2 - 
    15*int(999/15)*(1+int(999/15))/2
    
    #2
    sum = 0
    a = 1
    b = 2
    while b < 4e6:
        if b % 2 == 0:
            sum += b
        next = a + b
        a = b
        b = next
    
    print sum
    #--------------
    """
    The Fibonacci series is:
    1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610...
    Now, replacing an odd number with O and an even with E, we get:
    O, O, E, O, O, E, O, O, E, O, O, E, O, O, E...
    And so each third number is even.  We don't need to calculate the odd numbers.
    Starting from an two odd terms x, y, the series is:
    x, y, x + y, x + 2y, 2x + 3y, 3x + 5y
    """
  
    x = y = 1
    sum = 0
    while ((x + y) < 4e6):
        sum += (x + y)
        x, y = x + 2 * y, 2 * x + 3 * y
        print  x,y
    print sum
    
    #3
    import math
    def isprime(num, primelist):
        num_sqrt = math.sqrt(num)
        for prime in primelist:
            if num % prime == 0:
                return 0
            if prime > num_sqrt:
                break
        return 1
    
    primelist = []
    primelist.append(2)
    lim = 600851475143
    i = 3
    ret = []
    while i < lim:
        if isprime(i, primelist):
            primelist.append(i)
            while lim % i == 0:
                lim = lim / i
                ret.append(i)
        i += 2
    
    ret.append(lim)
    print max(ret)
    
    #4
    import sys
    for upnum in range(999, 99, -1):
        str_num = str(upnum) + str(upnum)[::-1]
        for div in range(100, 1000):
            if int(str_num) % div == 0:
                res = int(str_num) / div
                if len(str(res)) == 3:
                    print str_num
                    sys.exit(0)
    
    #5
    ret_factor = []
    
    ret = 2
    ret_factor.append(2)
    
    def get_factor(num, factors):
        ret = num
        for i in factors:
            if ret % i == 0:
                ret /= i
        return ret
    
    for i in range(3, 20):
        if ret % i:
            new_factor = get_factor(i, ret_factor)
            ret_factor.append(new_factor)
            ret *= new_factor
    print ret
    
    #6
    # squre_sum = n(n+1)(2n+1)/6
    # sum = (1+n)*n/2
    def diff_num(n):
        sum = (1+n)*n/2
        squre_sum = n*(n+1)*(2*n+1)/6
        return sum**2 - squre_sum
    
    print diff_num(100)
    
    #7
    import math
    def isprime(num, primelist):
        num_sqrt = math.sqrt(num)
        for prime in primelist:
            if num % prime == 0:
                return 0
            if prime > num_sqrt:
                break
        return 1
    
    primelist = []
    primelist.append(2)
    
    i = 1
    number = 3
    while i < 10001:
        if isprime(number, primelist):
            primelist.append(number)
            i += 1
        number += 2
    print primelist[-1]
    
  #8
  def compute_product(digit_list, start):
      pdt = 1
      for i in range(5):
          pdt *= digit_list[start + i]
      return pdt
  
  digit_list = []
  
  with open('problem8.txt', 'r') as ifile:
      c = ifile.read(1)
      while c:
          if c == '\n':
              c = ifile.read(1)
              continue
          digit_list.append(int(c))
          c = ifile.read(1)
      ifile.close()
  
  max_product = 0
  i = 0
  while i < len(digit_list) - 5:
      if digit_list[i] == 0:
          i += 5
          continue
      product = compute_product(digit_list, i)
      if product > max_product:
          max_product = product
      i += 1
      print max_product

#9
import sys
for a in range(1, 500):
    for b in range(1, 500):
        c = 1000 - a - b
        if a ** 2 + b ** 2 == c ** 2:
            print a*b*c
            sys.exit(0)
"""
Without programming:

a= 2mn; b= m^2 -n^2; c= m^2 + n^2;
a + b + c = 1000;

2mn + (m^2 -n^2) + (m^2 + n^2) = 1000;
2mn + 2m^2 = 1000;
2m(m+n) = 1000;
m(m+n) = 500;

m>n;
m= 20; n= 5;

a= 200; b= 375; c= 425;
"""

#10
import math
def isprime(num, primelist):
    num_sqrt = math.sqrt(num)
    for prime in primelist:
        if num % prime == 0:
            return 0
        if prime > num_sqrt:
            break
    return 1

primelist = []
primelist.append(2)
i = 3
sum_primes = 2
while i < 2e6:
    if isprime(i, primelist):
        primelist.append(i)
        sum_primes += i
    i += 2
print sum_primes

#11
NUM_NUMBER = 4

def strlist_to_intlist(strlist):
    intlist = []
    for ie in strlist:
        intlist.append(int(ie))
    return intlist

def compute_right_product(grid, row, col, cols):
    product = 1
    if col + NUM_NUMBER - 1 >= cols:
        return product
    for j in range(col, col + NUM_NUMBER):
        product *= grid[row][j]
    return product

def compute_down_product(grid, row, col, rows):
    product = 1
    if row + NUM_NUMBER - 1 >= rows:
        return product
    for i in range(row, row + NUM_NUMBER):
        product *= grid[i][col]
    return product

def compute_diagonal_product(grid, row, col, rows, cols):
    right_diagonal = 1
    left_diagonal = 1
    if row + NUM_NUMBER - 1 < rows and col + NUM_NUMBER - 1 < cols:
        for i in range(NUM_NUMBER):
            right_diagonal *= grid[row + i][col + i]
    if row + NUM_NUMBER - 1 < rows and col - NUM_NUMBER + 1 >= 0:
        for i in range(NUM_NUMBER):
            left_diagonal *= grid[row + i][col - i]
    if right_diagonal > left_diagonal:
        return right_diagonal
    else:
        return left_diagonal


grid = []

with open('problem11.txt', 'r') as ifile:
    for line in ifile:
        line_list = line.strip('\n').split(' ')
        grid.append(strlist_to_intlist(line_list))

COLS = 20
ROWS = 20
max_product = 0
for i in range(COLS):
    for j in range(ROWS):
        right_product = compute_right_product(grid, i, j, COLS)
        down_product = compute_down_product(grid, i, j, ROWS)
        diagonal_product = compute_diagonal_product(grid, i, j, ROWS, COLS)
        for product in right_product, down_product, diagonal_product:
            if product > max_product:
                max_product = product
print max_product

#12
import math

def num_divisors(number):
    num = 2 # 1 and self
    number_sqrt = int(math.sqrt(number))

    if number % number_sqrt == 0:
        num += 1
    for i in range(2, number_sqrt):
        if number % i == 0:
            num += 2
    return num
LIM = 100000
tri_number = 0
for i in range(1, LIM):
    tri_number += i
    if num_divisors(tri_number) > 500:
        print tri_number
        break

#13

#+end_src

