#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Project Euler
#+OPTIONS: num:nil H:2


* Answer
http://projecteuler.net/
#+begin_src python
#1
sum = 0
for i in range(1,1000):
    if i % 3 == 0 or i % 5 == 0:
        sum += i
print sum

#--------------
#sum = (s+e)*n/2=(d + d*int(x/d)) * int(x/d) /2
#sum = d * int(x/d) * (1 + int(x/d)) / 2
sum = 3*int(999/3)*(1+int(999/3))/2 + 
5*int(999/5)*(1+int(999/5))/2 - 
15*int(999/15)*(1+int(999/15))/2

#2
sum = 0
a = 1
b = 2
while b < 4e6:
    if b % 2 == 0:
        sum += b
    next = a + b
    a = b
    b = next

print sum
#--------------
'''
The Fibonacci series is:
1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610...
Now, replacing an odd number with O and an even with E, we get:
O, O, E, O, O, E, O, O, E, O, O, E, O, O, E...
And so each third number is even.  We don't need to calculate the odd numbers.
Starting from an two odd terms x, y, the series is:
x, y, x + y, x + 2y, 2x + 3y, 3x + 5y
'''
x = y = 1
sum = 0
while ((x + y) < 4e6):
    sum += (x + y)
    x, y = x + 2 * y, 2 * x + 3 * y
    print  x,y
print sum

#3
import math
def isprime(num, primelist):
    num_sqrt = math.sqrt(num)
    for prime in primelist:
        if num % prime == 0:
            return 0
        if prime > num_sqrt:
            break
    return 1

primelist = []
primelist.append(2)
lim = 600851475143
i = 3
ret = []
while i < lim:
    if isprime(i, primelist):
        primelist.append(i)
        while lim % i == 0:
            lim = lim / i
            ret.append(i)
    i += 2

ret.append(lim)
print max(ret)

#4
import sys
for upnum in range(999, 99, -1):
    str_num = str(upnum) + str(upnum)[::-1]
    for div in range(100, 1000):
        if int(str_num) % div == 0:
            res = int(str_num) / div
            if len(str(res)) == 3:
                print str_num
                sys.exit(0)

#5
ret_factor = []

ret = 2
ret_factor.append(2)

def get_factor(num, factors):
    ret = num
    for i in factors:
        if ret % i == 0:
            ret /= i
    return ret

for i in range(3, 20):
    if ret % i:
        new_factor = get_factor(i, ret_factor)
        ret_factor.append(new_factor)
        ret *= new_factor
print ret

#6
# squre_sum = n(n+1)(2n+1)/6
# sum = (1+n)*n/2
def diff_num(n):
    sum = (1+n)*n/2
    squre_sum = n*(n+1)*(2*n+1)/6
    return sum**2 - squre_sum

print diff_num(100)

#7
import math
def isprime(num, primelist):
    num_sqrt = math.sqrt(num)
    for prime in primelist:
        if num % prime == 0:
            return 0
        if prime > num_sqrt:
            break
    return 1

primelist = []
primelist.append(2)

i = 1
number = 3
while i < 10001:
    if isprime(number, primelist):
        primelist.append(number)
        i += 1
    number += 2
print primelist[-1]

#+end_src

