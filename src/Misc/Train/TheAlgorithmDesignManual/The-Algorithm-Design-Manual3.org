#+SETUPFILE: ~/.emacs.d/src/org-templates/level-3.org
#+TITLE: Algorithm Design Manual Chapter 3
#+OPTIONS: num:nil H:2


* Book Notes
** Contiguous vs. Linked Data Structures
+ Contiguously-allocated structuresare composed of single slabs of
  memory, and include arrays, matrices, heaps, and hash tables.
+ Linked data structuresare composed of distinct chunks of memory
  bound together bypointers, and include lists, trees, and graph
  adjacency lists.
** Arrays
Advantages of contiguously-allocated arrays include:
+ Constant-time access given the index– Because the index of each
  element maps directly to a particular memory address, we can access
  arbitrary data items instantly provided we know the index.
+ Space efficiency– Arrays consist purely of data, so no space is
  wasted with links or other formatting information. Further,
  end-of-record information is not needed because arrays are built
  from fixed-size records.
+ Memory locality– A common programming idiom involves iterating
  through all the elements of a data structure. Arrays are good for
  this because they exhibit excellent memory locality. Physical
  continuity between successive data accesses helps exploit the
  high-speedcache memory on modern computer architectures.

The downside of arrays is that we cannot adjust their size in the middle of
a program’s execution.

Actually, we can efficiently enlarge arrays as we need them, through the miracle
of dynamic arrays. The apparent waste in this procedure involves the recopying of the old contents
on each expansion. Thus, each of thenelements move only two times on average, and the total work
of managing the dynamic array is the sameO(n) as it would have been if a single
array of sufficient size had been allocated in advance! The primary thing lost using dynamic arrays is the guarantee that each array
access takes constant time /in the worst case/.
** Pointers and Linked Structures
The relative advantages of linked lists over static arrays include:
+ Overflow on linked structures can never occur unless the memory is
  actually full.
+ Insertions and deletions aresimplerthan for contiguous (array)
  lists.
+ With large records, moving pointers is easier and faster than moving
  the items themselves.

while the relative advantages of arrays include:
+ Linked structures require extra space for storing pointer fields.
+ Linked lists do not allow efficient random access to items.
+ Arrays allow better memory locality and cache performance than
  random pointer jumping.
** Stacks and Queues


* Exercises
* cc


#+begin_src c++

#+end_src



