<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>Linux Things</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
<meta name="title" content="Linux Things"/>
<meta name="generator" content="Org-mode"/>
<meta name="generated" content="2013-05-09T22:45+0800"/>
<meta name="author" content="Shi Shougang"/>
<meta name="description" content=""/>
<meta name="keywords" content=""/>
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color: #add8e6; font-weight:normal }
  .target { }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  {margin-left:auto; margin-right:0px;  text-align:right;}
  .left   {margin-left:0px;  margin-right:auto; text-align:left;}
  .center {margin-left:auto; margin-right:auto; text-align:center;}
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top;  }
  th.right  { text-align:center;  }
  th.left   { text-align:center;   }
  th.center { text-align:center; }
  td.right  { text-align:right;  }
  td.left   { text-align:left;   }
  td.center { text-align:center; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  div.inlinetask {
    padding:10px;
    border:2px solid gray;
    margin:10px;
    background: #ffffcc;
  }
  textarea { overflow-x: auto; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
  /*]]>*/-->
</style><link rel="stylesheet" href="./assets/stylesheet.css" type="text/css"/>
<link rel="stylesheet" type="text/css" href="../assets/stylesheet.css" />
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>

</head>
<body>
<div id="org-div-home-and-up" style="text-align:right;font-size:70%;white-space:nowrap;">
 <a accesskey="h" href="../index.html"> UP </a>
 |
 <a accesskey="H" href="../index.html"> HOME </a>
</div>

<div id="preamble">

</div>

<div id="content">
<h1 class="title">Linux Things</h1>

<p></p>
<p>
</p>
<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">VM</h2>
<div class="outline-text-2" id="text-1">

<p><a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt">https://www.kernel.org/doc/Documentation/sysctl/vm.txt</a>
</p>
<p>
<a href="http://russ.garrett.co.uk/2009/01/01/linux-kernel-tuning/">http://russ.garrett.co.uk/2009/01/01/linux-kernel-tuning/</a>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1"><code>overcommit_ratio</code></h3>
<div class="outline-text-3" id="text-1-1">

<p>Which happened to be 50. And the machine just happened to have about
5GB of RAM. Well look there, 5×50 is 250GB
</p>
<p>
 If a process tries to malloc() more memory than available it will get
 an error right away. This mode is set by changing the sysctl value
 vm.overcommit<sub>memory</sub> to 2.
</p></div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2"><code>vm.overcommit_ratio</code></h3>
<div class="outline-text-3" id="text-1-2">

<p></p>
<p>
</p></div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3"><code>vm.min_free_kbytes = 65536</code></h3>
<div class="outline-text-3" id="text-1-3">

<p>This tells the kernel to try and keep 64MB of RAM free at all times. It’s useful in two main cases:
</p>
<p>
</p><ul>
<li>Swap-less machines, where you don’t want incoming network traffic to
  overwhelm the kernel and force an OOM before it has time to flush
  any buffers.

<p>
</p></li>
<li>x86 machines, for the same reason: the x86 architecture only allows
  DMA transfers below approximately 900MB of RAM. So you can end up
  with the bizarre situation of an OOM error with tons of RAM free.
</li>
</ul>

<p></p>
<p>
</p></div>

</div>

<div id="outline-container-1-4" class="outline-3">
<h3 id="sec-1-4"><code>vm.swappiness = 0</code></h3>
<div class="outline-text-3" id="text-1-4">

<p>It’s said that altering swappiness can help you when you’re running
under high memory pressure with software that tries to do its own
memory management (i.e. MySQL). We’ve had limited success with this
and I’d much prefer to use software which doesn’t pretend to know more
about your hardware than the OS (i.e. PostgreSQL). Not that I’m
bitter.
</p>
<p>
</p></div>

</div>

<div id="outline-container-1-5" class="outline-3">
<h3 id="sec-1-5"><code>vm.overcommit_memory=1</code></h3>
<div class="outline-text-3" id="text-1-5">

<p>The overcommit<sub>memory</sub> sysctl isn’t something you’ll usually have to
change if your software isn’t insane, but our netboot setup uses it so
I thought I’d mention it. From the documentation:
</p>
<p>
</p><ol>
<li>- Heuristic overcommit handling. Obvious overcommits of address
   space are refused. Used for a typical system. It ensures a
   seriously wild allocation fails while allowing overcommit to reduce
   swap usage. root is allowed to allocate slighly more memory in this
   mode. This is the default.
</li>
<li>- Always overcommit. Appropriate for some scientific applications.
</li>
<li>- Don’t overcommit. The total address space commit for the system
   is not permitted to exceed swap + a configurable percentage
   (default is 50) of physical RAM. Depending on the percentage you
   use, in most situations this means a process will not be killed
   while accessing pages but will receive errors on memory allocation
   as appropriate.
</li>
</ol>

<p></p>
<p>
For more info on this, see the overcommit accounting documentation.
<a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt">https://www.kernel.org/doc/Documentation/sysctl/vm.txt</a>
</p>
<p>
</p></div>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">linux 下 强制回收内存</h2>
<div class="outline-text-2" id="text-2">

<p></p>
</div>

<div id="outline-container-2-1" class="outline-3">
<h3 id="sec-2-1"><code>drop_caches</code></h3>
<div class="outline-text-3" id="text-2-1">

<p>通过修改proc系统的drop<sub>caches清理free的cache</sub>
$echo 3 &gt; /proc/sys/vm/drop<sub>caches</sub>
</p>
<p>
drop<sub>caches的详细文档如下：</sub>
Writing to this will cause the kernel to drop clean caches, dentries and inodes from memory, causing that memory to become free.
</p>


<pre class="src src-sh">To free pagecache:
 <span style="color: #b0c4de;">echo</span> 1 &gt; /proc/sys/vm/drop_caches
To free dentries and inodes:
 <span style="color: #b0c4de;">echo</span> 2 &gt; /proc/sys/vm/drop_caches
To free pagecache, dentries and inodes:
 <span style="color: #b0c4de;">echo</span> 3 &gt; /proc/sys/vm/drop_caches
</pre>

<p>
As this is a non-destructive operation, and dirty objects are notfreeable, the user should run "sync" first in order to make sure allcached objects are freed.
This tunable was added in 2.6.16.
</p></div>

</div>

<div id="outline-container-2-2" class="outline-3">
<h3 id="sec-2-2">vm in /etc/sysctl.conf</h3>
<div class="outline-text-3" id="text-2-2">

<p>修改/etc/sysctl.conf 添加如下选项后就不会内存持续增加
</p>


<pre class="src src-sh">vm.dirty_ratio = 1
vm.dirty_background_ratio=1
vm.dirty_writeback_centisecs=2
vm.dirty_expire_centisecs=3
vm.drop_caches=3
vm.swappiness =100
vm.vfs_cache_pressure=163
vm.overcommit_memory=2
vm.lowmem_reserve_ratio=32 32 8
kern.maxvnodes=3
</pre>

<p>
上面的设置比较粗暴，使cache的作用基本无法发挥。需要根据机器的状况进行
适当的调节寻找最佳的折衷。
</p>
<p>
</p><ul>
<li id="sec-2-2-1"><code>min_free_kbytes</code><br/>

<p>
Regarding min<sub>free</sub><sub>kbytes</sub>, faster networking means kernel buffers get
full faster and you need more headroom to be able to allocate them.
You need to have enough to last until the vm manages to free up more
memory, and at high transfer speeds you have high buffer filling
speeds too. This will eat memory though, memory that will not be
available for normal processes or file cache.
</p>
<p>
If you see stuff like "swapper: page allocation failure. order:0,
mode:0x20" you definately need to increase min<sub>free</sub><sub>kbytes</sub> for the vm.
</p>
<p>
</p></li>
</ul>
<ul>
<li id="sec-2-2-2"><code>/proc/sys/vm/dirty_ratio</code><br/>
这个参数控制文件系统的文件系统写缓冲区的大小，单位是百分比，表示系统内
存的百分比，表示当写缓冲使用到系统内存多少的时候，开始向磁盘写出数 据。
增大之会使用更多系统内存用于磁盘写缓冲，也可以极大提高系统的写性能。但
是，当你需要持续、恒定的写入场合时，应该降低其数值，一般启动上缺省是
10。设1加速程序速度
</li>
</ul>
<ul>
<li id="sec-2-2-3"><code>/proc/sys/vm/dirty_background_ratio</code><br/>
这个参数控制文件系统的pdflush进程，在何时刷新磁盘。单位是百分比，表示
系统内存的百分比，意思是当写缓冲使用到系统内存多少的时 候，pdflush开始
向磁盘写出数据。增大之会使用更多系统内存用于磁盘写缓冲，也可以极大提高
系统的写性能。但是，当你需要持续、恒定的写入场合时， 应该降低其数值，
一般启动上缺省是 5

<p>
</p></li>
</ul>
<ul>
<li id="sec-2-2-4"><code>/proc/sys/vm/dirty_writeback_centisecs</code><br/>
这个参数控制内核的脏数据刷新进程pdflush的运行间隔。单位是 1/100 秒。缺
省数值是500，也就是 5 秒。如果你的系统是持续地写入动作，那么实际上还是
降低这个数值比较好，这样可以把尖峰的写操作削平成多次写操

<p>
</p></li>
</ul>
<ul>
<li id="sec-2-2-5"><code>/proc/sys/vm/dirty_expire_centisecs</code><br/>
这个参数声明Linux内核写缓冲区里面的数据多“旧”了之后，pdflush进程就开始
考虑写到磁盘中去。单位是 1/100秒。缺省是 30000，也就是 30 秒的数据就算
旧了，将会刷新磁盘。对于特别重载的写操作来说，这个值适当缩小也是好的，
但也不能缩小太多，因为缩小太多也会导致IO提高太快。建议设置为 1500，也
就是15秒算旧。 

<p>
</p></li>
</ul>
<ul>
<li id="sec-2-2-6"><code>/proc/sys/vm/drop_caches</code><br/>
释放已经使用的cache
</li>
</ul>
<ul>
<li id="sec-2-2-7"><code>/proc/sys/vm/page-cluster</code><br/>
该文件表示在写一次到swap区的时候写入的页面数量，0表示1页，1表示2页，2
表示4页。

<p>
</p></li>
</ul>
<ul>
<li id="sec-2-2-8">/proc/sys/vm/swapiness<br/>
该文件表示系统进行交换行为的程度，数值（0-100）越高，越可能发生磁盘交换。
</li>
</ul>
<ul>
<li id="sec-2-2-9"><code>/proc/sys/vm/vfs_cache_pressure</code><br/>
该文件表示内核回收用于directory和inode cache内存的倾向

<p>
</p></li>
</ul>
</div>

</div>

<div id="outline-container-2-3" class="outline-3">
<h3 id="sec-2-3">more soft configuration in /etc/sysctl.conf</h3>
<div class="outline-text-3" id="text-2-3">

<p></p>


<pre class="src src-sh">/etc/sysctl.conf
vm.dirty_ratio=1
vm.dirty_background_ratio=1
vm.dirty_writeback_centisecs=1
vm.dirty_expire_centisecs=3
vm.drop_caches=3
vm.swapiness=100
vm.vfs_cache_pressure=133

vm.dirty_ratio = 5    <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">dft 20  %</span>
vm.dirty_background_ratio =5 <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">dft 10 %</span>
vm.dirty_writeback_centisecs=100 <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">dft 500 is 5s</span>
vm.dirty_expire_centisecs=300    <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">dft 30000 is 30s</span>
vm.drop_caches=3  <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">dft  0</span>
vm.swappiness=100  <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">dft 60</span>
vm.vfs_cache_pressure=133  <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">dft 100</span>

vm.min_free_kbytes=204800

<span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">200M mem</span>

save simple sysctl -w net.ipv4.route.flush=1
</pre>

<p>
</p></div>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">Linux Kernel Route Cache</h2>
<div class="outline-text-2" id="text-3">

<p>To display the “Route Cache”, one could simply issue the <code>“ip route show cache”</code> command.
</p>
<p>
</p>


<pre class="src src-sh">[ kernel network subsystem ] &#8212;-&gt; Route Cache || [ If no match ] &#8212;-&gt; RPDB || [ If no match ] &#8212;-&gt; Route Table
</pre>

<p>
When the routing subsystem of the kernel is initialized, an exec of
ip<sub>rt</sub><sub>init</sub> is initiated
<code>(source: linux/net/ipv4/ip_output.c)</code>
</p>


<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">__init</span> ip_init(<span style="color: #98fb98;">void</span>)
{
        ip_rt_init();
        inet_initpeers();

<span style="color: #b0c4de;">#if</span> <span style="color: #b0c4de;">defined</span>(CONFIG_IP_MULTICAST) &amp;&amp; <span style="color: #b0c4de;">defined</span>(CONFIG_PROC_FS)
        igmp_mc_proc_init();
<span style="color: #b0c4de;">#endif</span>
}
</pre>


<p>
Part of ip<sub>rt</sub><sub>init</sub> is to allocate the memory set to be used to cache
the network routes but also to initialize global variables such as
rt<sub>hash</sub><sub>table</sub> and rt<sub>hash</sub><sub>rnd</sub> and many others.
</p>
<p>
You can view the details of the ip<sub>rt</sub><sub>init</sub> function in /net/ipv4/route.c
</p>
<p>
rt<sub>hash</sub><sub>table</sub> defines a hash table of the route cache with
rt<sub>hash</sub><sub>mask</sub> holding its size. An easy way to check the size of the
routing cache table is to look in dmesg, by grepping “IP route”
</p>
<p>
</p>


<pre class="src src-sh">aabbas@mig:~$ dmesg |grep &#8220;IP route&#8221;
[    1.814492] IP route cache hash table entries: 262144 (order: 9,2097152 bytes)
</pre>


<p>
The max size of the route cache is configurable through
/proc/sys/net/ipv4/route/max<sub>size</sub>. furthermore to prevent the size of
the hash to exceed the max<sub>size</sub>, the kernel makes use of a garbage
collector gc<sub>tresh</sub>
</p>
<p>
When an interface goes down/up or a new changes take place which would
affect the routing cache, the kernel executes rt<sub>cache</sub><sub>flush</sub> which in
returns executes rt<sub>run</sub><sub>flush</sub>. Many events such as IP removal, removal
of interfaces etc… trigger the route cache to be flushed, however keep
in mind, that periodically it will be flushed based on the value of
rt<sub>secret</sub><sub>timer</sub>. The time value is configurable in
<code>/proc/sys/net/ipv4/route/secret_interval</code>.
</p>
<p>
To trigger a route cache flush, issue
</p>


<pre class="src src-sh"><span style="color: #b0c4de;">echo</span> -1 &gt; /proc/sys/net/ipv4/route/flush or ip route flush cache
</pre>


<p>
ip<sub>rt</sub><sub>min</sub><sub>delay</sub> and ip<sub>rt</sub><sub>max</sub><sub>delay</sub> define the time within which the
flush would occur, setting the ip<sub>rt</sub><sub>min</sub><sub>delay</sub> value to 0 would
immediately ensure that the cache is flushed when rt<sub>run</sub><sub>flush</sub> is
triggered.
</p>
<p>
</p></div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Linux CPU Load</h2>
<div class="outline-text-2" id="text-4">

<p></p>
</div>

<div id="outline-container-4-1" class="outline-3">
<h3 id="sec-4-1">Load Average is caused by two things</h3>
<div class="outline-text-3" id="text-4-1">

<p></p><ol>
<li>Cpu it self is busy/overloaded  in processing things
</li>
<li>Processes  (typically called Blocking process) in run queue,
   waiting for I/O
</li>
</ol>

<p></p>
<p>
In fact, it is precisely the CPU load that is measured, because load
averages do not include any processes or threads waiting on I/O,
networking, databases or anything else not demanding the CPU. It
narrowly focuses on what is actively demanding CPU time. This differs
greatly from the CPU percentage. The CPU percentage is the amount of a
time interval (that is, the sampling interval) that the system's
processes were found to be active on the CPU. <sup><a class="footref" name="fnr-.1" href="#fn-.1">1</a></sup>
</p>
<p>
The load averages differ from CPU percentage in two significant
ways: 1) load averages measure the trend in CPU utilization not only
an instantaneous snapshot, as does percentage, and 2) load averages
include all demand for the CPU not only how much was active at the
time of measurement.
</p>
<p>
</p></div>

</div>

<div id="outline-container-4-2" class="outline-3">
<h3 id="sec-4-2">Calculate the load <sup><a class="footref" name="fnr-.1.2" href="#fn-.1">1</a></sup></h3>
<div class="outline-text-3" id="text-4-2">

<p>When the quantum timer pops, timer.c is entered at a function in the
kernel called timer.c:do<sub>timer</sub>(). Here, all interrupts are disabled so
the code is not working with moving targets. The jiffies counter is
incremented by 1, and the load-average calculation is checked to see
if it should be computed. 
</p>
<p>
The calculation code uses the HZ value to determine the calculation
frequency. Specifically, the timer.c:calc<sub>load</sub>() function will run the
averaging algorithm every 5 * HZ, or roughly every five seconds. 
</p>


<pre class="src src-c"> <span style="color: #98fb98;">unsigned</span> <span style="color: #98fb98;">long</span> <span style="color: #eedd82;">avenrun</span>[3];

   <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">inline</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">calc_load</span>(<span style="color: #98fb98;">unsigned</span> <span style="color: #98fb98;">long</span> <span style="color: #eedd82;">ticks</span>)
   {
      <span style="color: #98fb98;">unsigned</span> <span style="color: #98fb98;">long</span> <span style="color: #eedd82;">active_tasks</span>; <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">fixed-point </span><span style="color: #ff7f24;">*/</span>
      <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">count</span> = LOAD_FREQ;

      count -= ticks;
      <span style="color: #00ffff;">if</span> (count &lt; 0) {
         count += LOAD_FREQ;
         active_tasks = count_active_tasks();
         CALC_LOAD(avenrun[0], EXP_1, active_tasks);
         CALC_LOAD(avenrun[1], EXP_5, active_tasks);
         CALC_LOAD(avenrun[2], EXP_15, active_tasks);
      }
   }

<span style="color: #00ffff;">extern</span> <span style="color: #98fb98;">unsigned</span> <span style="color: #98fb98;">long</span> <span style="color: #eedd82;">avenrun</span>[]; <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">Load averages </span><span style="color: #ff7f24;">*/</span>

<span style="color: #b0c4de;">   #define</span> <span style="color: #eedd82;">FSHIFT</span>   11          <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">nr of bits of precision </span><span style="color: #ff7f24;">*/</span>
<span style="color: #b0c4de;">   #define</span> <span style="color: #eedd82;">FIXED_1</span>  (1&lt;&lt;FSHIFT) <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">1.0 as fixed-point </span><span style="color: #ff7f24;">*/</span>
<span style="color: #b0c4de;">   #define</span> <span style="color: #eedd82;">LOAD_FREQ</span> (5*HZ)     <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">5 sec intervals </span><span style="color: #ff7f24;">*/</span>
<span style="color: #b0c4de;">   #define</span> <span style="color: #eedd82;">EXP_1</span>  1884          <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">1/exp(5sec/1min) as fixed-point </span><span style="color: #ff7f24;">*/</span>
<span style="color: #b0c4de;">   #define</span> <span style="color: #eedd82;">EXP_5</span>  2014          <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">1/exp(5sec/5min) </span><span style="color: #ff7f24;">*/</span>
<span style="color: #b0c4de;">   #define</span> <span style="color: #eedd82;">EXP_15</span> 2037          <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">1/exp(5sec/15min) </span><span style="color: #ff7f24;">*/</span>

<span style="color: #b0c4de;">   #define</span> <span style="color: #87cefa;">CALC_LOAD</span>(<span style="color: #eedd82;">load</span>,<span style="color: #eedd82;">exp</span>,<span style="color: #eedd82;">n</span>) \
      load *= exp; \
      load += n*(FIXED_1-exp); \
      load &gt;&gt;= FSHIFT;
</pre>

<p>
he calc<sub>load</sub>() function is called by update<sub>times</sub>(), also found in
timer.c, and is the code responsible for supplying the calc<sub>load</sub>()
function with the ticks parameter. 
</p>
<p>
The macro takes in three parameters: the load-average bucket (one of
the three elements in avenrun[]), a constant exponent and the number
of running/uninterruptible processes currently on the run queue. The
possible exponent constants are listed above: EXP<sub>1</sub> for the 1-minute
average, EXP<sub>5</sub> for the 5-minute average and EXP<sub>15</sub> for the 15-minute
average. The important point to notice is that the value decreases
with age. The constants are magic numbers that are calculated by the
mathematical function shown below:
