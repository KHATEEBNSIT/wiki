http://www.redhat.com/advice/tips/meminfo.html
#+begin_src sh
free
root:	total:    	used:    	free:  		shared:	buffers:	cached:
Mem:  	1055760384	1041887232	13873152	0	100417536 	711233536
Swap: 	1077501952  	8540160 	1068961792

cat /proc/meminfo
MemTotal:		1031016 kB	
MemFree:		13548 kB
MemShared:		0 kB
Buffers:		98064 kB
Cached:			692320 kB
SwapCached:		2244 kB
Active:			563112 kB
Inact_dirty:		309584 kB
Inact_clean:		79508 kB
Inact_target:		190440 kB
HighTotal:		130992 kB
HighFree:		1876 kB
LowTotal:		900024 kB
LowFree:		11672 kB
SwapTotal:		1052248 kB
SwapFree:		1043908 kB
Committed_AS:		332340 kB
#+end_src


High-Level Statistics
+ MemTotal: Total usable ram (i.e. physical ram minus a few reserved bits and the kernel binary code)
+ MemFree: Is sum of LowFree+HighFree (overall stat)
+ MemShared: 0; is here for compat reasons but always zero.
+ Buffers: Memory in buffer cache. mostly useless as metric nowadays
+ Cached: Memory in the pagecache (diskcache) minus SwapCache
+ SwapCache: Memory that once was swapped out, is swapped back in but still also is in the swapfile (if memory is needed it doesn't need to be swapped out AGAIN because it is already in the swapfile. This saves I/O)

VM Statistics

Active:	Memory that has been used more recently and usually not reclaimed unless absolutely necessary.
Inact_dirty: Dirty means "might need writing to disk or swap." Takes more work to free. Examples might be files that have not been written to yet. They aren't written to memory too soon in order to keep the I/O down. For instance, if you're writing logs, it might be better to wait until you have a complete log ready before sending it to disk.
Inact_clean: Assumed to be easily freeable. The kernel will try to keep some clean stuff around always to have a bit of breathing room.
Inact_target: Just a goal metric the kernel uses for making sure there are enough inactive pages around. When exceeded, the kernel will not do work to move pages from active to inactive. A page can also get inactive in a few other ways, e.g. if you do a long sequential I/O, the kernel assumes you're not going to use that memory and makes it inactive preventively. So you can get more inactive pages than the target because the kernel marks some cache as "more likely to be never used" and lets it cheat in the "last used" order.
Memory Statistics
HighTotal: is the total amount of memory in the high region. Highmem is all memory above (approx) 860MB of physical RAM. Kernel uses indirect tricks to access the high memory region. Data cache can go in this memory region.
LowTotal: The total amount of non-highmem memory.
LowFree: The amount of free memory of the low memory region. This is the memory the kernel can address directly. All kernel datastructures need to go into low memory.
SwapTotal: Total amount of physical swap memory.
SwapFree: Total amount of swap memory free.
Committed_AS: An estimate of how much RAM you would need to make a 99.99% guarantee that there never is OOM (out of memory) for this workload. Normally the kernel will overcommit memory. That means, say you do a 1GB malloc, nothing happens, really. Only when you start USING that malloc memory you will get real memory on demand, and just as much as you use. So you sort of take a mortgage and hope the bank doesn't go bust. Other cases might include when you mmap a file that's shared only when you write to it and you get a private copy of that data. While it normally is shared between processes. The Committed_AS is a guesstimate of how much RAM/swap you would need worst-case.



http://lwn.net/Articles/28309/

I'm trying to document all of the fields in /proc/meminfo for future
inclusion into Documentation/filesystems/proc.txt

Does anyone has comments to add, or corrections for mine?

----------------------------------------------------------------------

Provides information about distribution and utilization of memory.  This
varies by architecture and compile options.  The following is from a
16GB PIII, which has highmem enabled.  You may not have all of these fields.

MemTotal:     16344972 kB
MemFree:      13634064 kB
Buffers:          3656 kB
Cached:        1195708 kB
SwapCached:          0 kB
Active:         891636 kB
Inactive:      1077224 kB
HighTotal:    15597528 kB
HighFree:     13629632 kB
LowTotal:       747444 kB
LowFree:          4432 kB
SwapTotal:           0 kB
SwapFree:            0 kB
Dirty:             968 kB
Writeback:           0 kB
Mapped:         280372 kB
Slab:           684068 kB
Committed_AS:  1576424 kB
PageTables:      24448 kB
ReverseMaps:   1080904
VmallocTotal:   112216 kB
VmallocUsed:       428 kB
VmallocChunk:   111088 kB

MemTotal:     HighTotal + LowTotal
MemFree:      LowFree + HighFree

Buffers:      relatively temporary storage for raw disk blocks
              shouldn't get tremendously large (20MB or so)
Cached:       in-memory cache for files read from the disk (the page
              cache)
SwapCached:   things which were "Cached", but have now been
              swapped out to disk.

Active:
Inactive:

HighTotal:
HighFree:     Highmem areas are for use by userspace programs, or
              for the pagecache.

LowTotal:
LowFree:      Lowmem is memory which can be used for everything that
              highmem can be used for, but it is also availble for the
              kernel's use.  Among many other things, it is where
              everything from the Slab is allocated.  Bad things happen
              when you're out of lowmem.

SwapTotal:    total amount of swap space available
SwapFree:     Memory which has been evicted from RAM, and is temporarily
              on the disk
Dirty:        Memory which is waiting to get written back to the disk

Writeback:    Memory which is actively being written back to the disk

Mapped:       files which have been mmaped, such as libraries

Slab:         in-kernel data structures cache

Committed_AS:

PageTables:

ReverseMaps:  number of rmap pte chains

VmallocTotal: total size of vmalloc memory area
VmallocUsed:  amount of vmalloc area which is used
VmallocChunk: largest contigious block of vmalloc area which is free


